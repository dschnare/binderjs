(function(k,d){function l(){return{p1:d.makeProperty("Mario"),p2:d.makeProperty("Luigi")}}function n(a){strictEqual(a.toString(),"1,2,3",'Expect "p.toString()" to be equal to "1,2,3"');strictEqual(a().join(","),"1,2,3",'Expect "p().join(",")" to be equal to "1,2,3"');strictEqual(a.get().join(","),"1,2,3",'Expect "p.get().join(",")" to be equal to "1,2,3"');strictEqual(a.valueOf().join(","),"1,2,3",'Expect "p.valueOf().join(",")" to be equal to "1,2,3"');a().push(4);strictEqual(a.valueOf().join(","),
"1,2,3,4",'Expect "p.valueOf().join(",")" to be equal to "1,2,3,4"');var b=!1;a.subscribe(function(){b=!0});b=!1;a().remove(1);ok(b,"Expect the property to be notified when the first element is removed");b=!1;a().clear();ok(b,"Expect the property to be notified when the list is cleared");b=!1;a().push(1,2,3);ok(b,"Expect the property to be notified when new items are pushed onto the list");b=!1;a().pop();ok(b,"Expect the property to be notified when an item is popped off the list");b=!1;a().shift();
ok(b,"Expect the property to be notified when item is removed from front of list");b=!1;a().unshift(1);ok(b,"Expect the property to be notified when item is prepended to front of list");b=!1;a().splice(0,1);ok(b,"Expect the property to be notified when the list is spliced");b=!1;a().splice(0,0);notStrictEqual(b,!0,"Expect the property to be notified when the list is spliced but zero elements are removed and added");a().push(10);b=!1;a().sort();ok(b,"Expect the property to be notified when the list is sorted");
b=!1;a().insert(0,11);ok(b,"Expect the property to be notified when an item is inserted");b=!1;a().reverse();ok(b,"Expect the property to be notified when the list is reversed");b=!1;a().replaceAt(0,99);ok(b,"Expect the property to be notified when an item is replaced");b=!1;a()[0]=void 0;a().collapse();ok(b,"Expect the property to be notified when a sparse list is collapsed")}function f(){return d.makeList(1,2,3,1)}function e(a){a.clear()}function g(){var a=d.makeObservableList(1,2,3,1),b={notifiedCount:0,
onNotify:function(a){this.notifiedCount+=Boolean(a)?1:0},reset:function(){this.notifiedCount=0}};a.subscribe(b);return{list:a,observer:b}}function h(a){a.dispose();a.clear()}module("Binding Tests");test("adherence test",function(){var a=l(),b=a.p1,c=a.p2;raises(function(){d.makeBinding(1,2)},"Expect makeBinding to throw an error when called with numbers.");raises(function(){d.makeBinding(1,c)},"Expect makeBinding to throw an error when called with a number and a property.");raises(function(){d.makeBinding(b,
2)},"Expect makeBinding to throw an error when called with a number and a property.")});test("oneWay binding test",function(){var a=l(),b=a.p1,a=a.p2,c=d.makeBinding(b,a,"oneway");strictEqual(c.type(),"oneway",'Expect binding to have a type of "oneway"');strictEqual(c.source(),b,"Expect binding to have a source equal to p1");strictEqual(c.sink(),a,"Expect binding to have a sink equal to p2");strictEqual("Mario",a(),'Expect p2 to have a value of "Mario"');b("Luigi");strictEqual("Luigi",b(),'Expect p1 to have a value of "Luigi"');
strictEqual("Luigi",a(),'Expect p2 to have a value of "Luigi"');a("Mario");strictEqual("Luigi",b(),'Expect p1 to have a value of "Luigi"');strictEqual("Mario",a(),'Expect p2 to have a value of "Mario"');b("Toad");strictEqual("Toad",b(),'Expect p1 to have a value of "Toad"');strictEqual("Toad",a(),'Expect p2 to have a value of "Toad"')});test("twoWay binding test",function(){var a=l(),b=a.p1,a=a.p2,c=d.makeBinding(b,a);strictEqual(c.type(),"twoway",'Expect binding to have a type of "twoway"');strictEqual(c.source(),
b,"Expect binding to have a source equal to p1");strictEqual(c.sink(),a,"Expect binding to have a sink equal to p2");strictEqual(a(),"Mario",'Expect p2 to have a value of "Mario"');b("Luigi");strictEqual(b(),"Luigi",'Expect p1 to have a value of "Luigi"');strictEqual(a(),"Luigi",'Expect p2 to have a value of "Luigi"');a("Princess");strictEqual(b(),"Princess",'Expect p1 to have a value of "Princess"');strictEqual(a(),"Princess",'Expect p2 to have a value of "Princess"');b("Toad");strictEqual(b(),"Toad",
'Expect p1 to have a value of "Toad"');strictEqual(a(),"Toad",'Expect p2 to have a value of "Toad"')});test("once binding test",function(){var a=l(),b=a.p1,a=a.p2,c=d.makeBinding(b,a,"once");strictEqual(c.type(),"once",'Expect binding to have a type of "once"');strictEqual(c.source(),b,"Expect binding to have a source equal to p1");strictEqual(c.sink(),a,"Expect binding to have a sink equal to p2");strictEqual(a(),"Mario",'Expect p2 to have a value of "Mario"');b("Luigi");strictEqual(b(),"Luigi",
'Expect p1 to have a value of "Luigi"');strictEqual(a(),"Mario",'Expect p2 to have a value of "Mario"');a("Princess");strictEqual(b(),"Luigi",'Expect p1 to have a value of "Luigi"');strictEqual(a(),"Princess",'Expect p2 to have a value of "Princess"');b("Toad");strictEqual(b(),"Toad",'Expect p1 to have a value of "Toad"');strictEqual(a(),"Princess",'Expect p2 to have a value of "Princess"')});module("From JSON Tests");test("simple fromJSON test",function(){var a;a=d.fromJSON({firstName:"Darren",lastName:"Schnare",
skills:["javascript","html","css","ruby"],team:[{firstName:"Alex",lastName:"Grendo"},{firstName:"Sam",lastName:"Hilto"},{firstName:"James",lastName:"Wazzabi"}]});strictEqual(typeof a.firstName,"function","Expect model.firstName to be a function");strictEqual(a.firstName(),"Darren",'Expect model.firstName() to equal "Darren"');strictEqual(typeof a.lastName,"function","Expect model.lastName to be a function");strictEqual(a.lastName(),"Schnare",'Expect model.lastName() to equal "Schnare"');strictEqual(typeof a.skills,
"function","Expect model.skills to be a function");ok(k.isArray(a.skills()),"Expect model.skills() to be an Array");strictEqual(a.skills().join(","),"javascript,html,css,ruby","Expect model.skills() to equal [javascript, html, css, ruby]");strictEqual(typeof a.team,"function","Expect model.team to be a function");ok(k.isArray(a.team()),"Expect model.team() to be an Array");strictEqual(a.team()[0].firstName(),"Alex",'Expect model.team()[0].firstName() to equal "Alex"');strictEqual(a.team()[0].lastName(),
"Grendo",'Expect model.team()[0].lastName() to equal "Grendo"');strictEqual(a.team()[1].firstName(),"Sam",'Expect model.team()[1].firstName() to equal "Sam"');strictEqual(a.team()[1].lastName(),"Hilto",'Expect model.team()[1].lastName() to equal "Hilto"');strictEqual(a.team()[2].firstName(),"James",'Expect model.team()[2].firstName() to equal "James"');strictEqual(a.team()[2].lastName(),"Wazzabi",'Expect model.team()[2].lastName() to equal "Wazzabi"')});test("custom fromJSON test",function(){var a;
a=d.fromJSON({firstName:"Darren",lastName:"Schnare",skills:["javascript","html","css","ruby"],team:[{firstName:"Alex",lastName:"Grendo"},{firstName:"Sam",lastName:"Hilto"},{firstName:"James",lastName:"Wazzabi"}]},{filter:function(a){a.fullName=d.makeProperty(function(){return a.firstName+" "+a.lastName});return a},properties:{skills:function(a,c){return c.charAt(0).toUpperCase()+c.substring(1)},team:{exclude:["firstName","lastName"],filter:function(a,c){a.name=d.makeProperty(c.firstName+" "+c.lastName);
return a}}}});strictEqual(typeof a.firstName,"function","Expect model.firstName to be a function");strictEqual(a.firstName(),"Darren",'Expect model.firstName() to equal "Darren"');strictEqual(typeof a.lastName,"function","Expect model.lastName to be a function");strictEqual(a.lastName(),"Schnare",'Expect model.lastName() to equal "Schnare"');strictEqual(a.fullName(),"Darren Schnare",'Expect model.fullName() to equal "Darren Schnare"');strictEqual(typeof a.skills,"function","Expect model.skills to be a function");
ok(k.isArray(a.skills()),"Expect model.skills() to be an Array");strictEqual(a.skills().join(","),"Javascript,Html,Css,Ruby","Expect model.skills() to equal [Javascript, Html, Css, Ruby]");strictEqual(typeof a.team,"function","Expect model.team to be a function");ok(k.isArray(a.team()),"Expect model.team() to be an Array");strictEqual(a.team()[0].name(),"Alex Grendo",'Expect model.team()[0].name() to equal "Alex Grendo"');strictEqual(a.team()[0].firstName,void 0,"Expect model.team()[0].firstName to equal undefined");
strictEqual(a.team()[0].lastName,void 0,"Expect model.team()[0].lastName to equal undefined");strictEqual(a.team()[1].name(),"Sam Hilto",'Expect model.team()[1].name() to equal "Sam Hilto"');strictEqual(a.team()[1].firstName,void 0,"Expect model.team()[1].firstName to equal undefined");strictEqual(a.team()[1].lastName,void 0,"Expect model.team()[1].lastName to equal undefined");strictEqual(a.team()[2].name(),"James Wazzabi",'Expect model.team()[2].name() to equal "James Wazzabi"');strictEqual(a.team()[2].firstName,
void 0,"Expect model.team()[2].firstName to equal undefined");strictEqual(a.team()[2].lastName,void 0,"Expect model.team()[2].lastName to equal undefined")});module("To JSON Tests");test("simple toJSON test",function(){var a,b={firstName:d.makeProperty("Darren"),lastName:d.makeProperty("Schnare"),skills:d.makeProperty(["javascript","html","css","ruby"]),team:[{firstName:d.makeProperty("Alex"),lastName:d.makeProperty("Grendo")},{firstName:d.makeProperty("Sam"),lastName:d.makeProperty("Hilto")},{firstName:d.makeProperty("James"),
lastName:d.makeProperty("Wazzabi")}]};b.fullName=d.makeProperty(function(){return b.firstName+" "+b.lastName});a=d.toJSON(b);strictEqual(a.firstName,"Darren",'Expect o.firstName to equal "Darren"');strictEqual(a.lastName,"Schnare",'Expect o.lastName to equal "Schnare"');strictEqual(a.fullName,"Darren Schnare",'Expect o.fullName to equal "Darren Schnare"');ok(k.isArray(a.skills),"Expect o.skills to be an Array");strictEqual(a.skills.join(","),"javascript,html,css,ruby","Expect o.skills to equal [javascript, html, css, ruby]");
ok(k.isArray(a.team),"Expect o.team to be an Array");strictEqual(a.team[0].firstName,"Alex",'Expect o.team[0].firstName to equal "Alex"');strictEqual(a.team[0].lastName,"Grendo",'Expect o.team[0].lastName to equal "Grendo"');strictEqual(a.team[1].firstName,"Sam",'Expect o.team[1].firstName to equal "Sam"');strictEqual(a.team[1].lastName,"Hilto",'Expect o.team[1].lastName to equal "Hilto"');strictEqual(a.team[2].firstName,"James",'Expect o.team[2].firstName to equal "James"');strictEqual(a.team[2].lastName,
"Wazzabi",'Expect o.team[2].lastName to equal "Wazzabi"')});test("custom toJSON test",function(){var a,b={firstName:d.makeProperty("Darren"),lastName:d.makeProperty("Schnare"),skills:d.makeProperty(["javascript","html","css","ruby"]),team:[{firstName:d.makeProperty("Alex"),lastName:d.makeProperty("Grendo")},{firstName:d.makeProperty("Sam"),lastName:d.makeProperty("Hilto")},{firstName:d.makeProperty("James"),lastName:d.makeProperty("Wazzabi")}]};b.fullName=d.makeProperty(function(){return b.firstName+
" "+b.lastName});a=d.toJSON(b,{exclude:["fullName"],properties:{skills:function(a){return a.charAt(0).toUpperCase()+a.substring(1)},team:{exclude:["firstName","lastName"],filter:function(a,b){a.name=b.firstName+" "+b.lastName;return a}}}});strictEqual(a.firstName,"Darren",'Expect o.firstName to equal "Darren"');strictEqual(a.lastName,"Schnare",'Expect o.lastName to equal "Schnare"');strictEqual(a.fullName,void 0,"Expect o.fullName to equal undefined");ok(k.isArray(a.skills),"Expect o.skills to be an Array");
strictEqual(a.skills.join(","),"Javascript,Html,Css,Ruby","Expect o.skills to equal [Javascript, Html, Css, Ruby]");ok(k.isArray(a.team),"Expect o.team to be an Array");strictEqual(a.team[0].name,"Alex Grendo",'Expect o.team[0].name to equal "Alex Grendo"');strictEqual(a.team[0].firstName,void 0,"Expect o.team[0].firstName to equal undefined");strictEqual(a.team[0].lastName,void 0,"Expect o.team[0].lastName to equal undefined");strictEqual(a.team[1].name,"Sam Hilto",'Expect o.team[1].name to equal "Sam Hilto"');
strictEqual(a.team[1].firstName,void 0,"Expect o.team[1].firstName to equal undefined");strictEqual(a.team[1].lastName,void 0,"Expect o.team[1].lastName to equal undefined");strictEqual(a.team[2].name,"James Wazzabi",'Expect o.team[2].name to equal "James Wazzabi"');strictEqual(a.team[2].firstName,void 0,"Expect o.team[2].firstName to equal undefined");strictEqual(a.team[2].lastName,void 0,"Expect o.team[2].lastName to equal undefined")});module("Property Tests");test("adherence test",function(){var a=
d.makeProperty("value");ok(k.adheresTo(a,d.makeProperty.interfce),'Expect "p" to adhere to the "binder.makeProperty.interfce" interface');notStrictEqual(a.isDependent(),!0,'Expect "p" to not be dependent');strictEqual(a.dependencies().length,0,'Expect "p" to have no dependencies');strictEqual(a.toString(),"value",'Expect "p.toString()" to be equal to "value"');strictEqual(a.valueOf(),"value",'Expect "p.valueOf()" to be equal to "value"');strictEqual(a.get(),"value",'Expect "p.get()" to be equal to "value"');
strictEqual(a(),"value",'Expect "p()" to be equal to "value"');a("value2");strictEqual(a.toString(),"value2",'Expect "p.toString()" to be equal to "value2"');strictEqual(a.valueOf(),"value2",'Expect "p.valueOf()" to be equal to "value2"');strictEqual(a.get(),"value2",'Expect "p.get()" to be equal to "value2"');strictEqual(a(),"value2",'Expect "p()" to be equal to "value2"');a.set("value3");strictEqual(a.toString(),"value3",'Expect "p.toString()" to be equal to "value3"');strictEqual(a.valueOf(),"value3",
'Expect "p.valueOf()" to be equal to "value3"');strictEqual(a.get(),"value3",'Expect "p.get()" to be equal to "value3"');strictEqual(a(),"value3",'Expect "p()" to be equal to "value3"');a.dispose()});test("dependcies test",function(){var a=d.makeProperty("Super"),b=d.makeProperty("Mario"),c=!1,i=d.makeProperty(function(){return a+" "+b}),j=i.dependencies();ok(i.isDependent(),'Expect "fullName" to be dependent');ok(j.contains(a)&&j.contains(b),'Expect "fullName" to be dependent on "fname" and "lname"');
strictEqual(i(),"Super Mario",'Expect "fullName()" to be equal to "Super Mario"');i.subscribe(function(){c=!0});a.set("super");ok(c,'Expect "fullName" to be notified that "fname" has been changed');strictEqual(i(),"super Mario",'Expect "fullName()" to be equal to "super Mario"');c=!1;i.dispose();a.set("Super");ok(!c,'Expect "fullName" not to be notified that "fname" has been changed');ok(!i.isDependent(),'Expect "fullName" not to be dependent');ok(!j.contains(a)&&!j.contains(b),'Expect "fullName" not to be dependent on "fname" and "lname"');
strictEqual(i(),"super Mario",'Expect "fullName()" to be equal to "super Mario"')});test("memoization test",function(){var a=!1,b=d.makeProperty(function(){a=!0;return"value"});ok(a,"Expect property to have been called");a=!1;b();notStrictEqual(a,!0,"Expect property to have been called");b.clearMemo();b();ok(a,"Expect property to have been called")});test("lazy test",function(){var a=!1,b=d.makeProperty({lazy:!0,get:function(){a=!0;return"value"}});notStrictEqual(a,!0,"Expect property to have been called");
b();ok(a,"Expect property to have been called")});test("simple construction test",function(){var a=d.makeProperty("value");strictEqual(a.toString(),"value",'Expect "p.toString()" to be equal to "value"');strictEqual(a.valueOf(),"value",'Expect "p.valueOf()" to be equal to "value"');strictEqual(a.get(),"value",'Expect "p.get()" to be equal to "value"');strictEqual(a(),"value",'Expect "p()" to be equal to "value"')});test("value parameterized construction test",function(){var a=d.makeProperty({value:"value"});
strictEqual(a.toString(),"value",'Expect "p.toString()" to be equal to "value"');strictEqual(a.valueOf(),"value",'Expect "p.valueOf()" to be equal to "value"');strictEqual(a.get(),"value",'Expect "p.get()" to be equal to "value"');strictEqual(a(),"value",'Expect "p()" to be equal to "value"')});test("custom getter construction test",function(){var a=!1,b=d.makeProperty({get:function(){a=!0;return"value"}});ok(a,"Expect the custom getter to be called");strictEqual(b.toString(),"value",'Expect "p.toString()" to be equal to "value"');
strictEqual(b.valueOf(),"value",'Expect "p.valueOf()" to be equal to "value"');strictEqual(b.get(),"value",'Expect "p.get()" to be equal to "value"');strictEqual(b(),"value",'Expect "p()" to be equal to "value"')});test("custom getter/setter construction test",function(){var a=!1,b=!1,c=d.makeProperty({get:function(){a=!0;return"value"},set:function(){b=!0}});ok(a,"Expect the custom getter to be called");strictEqual(c.toString(),"value",'Expect "p.toString()" to be equal to "value"');strictEqual(c.valueOf(),
"value",'Expect "p.valueOf()" to be equal to "value"');strictEqual(c.get(),"value",'Expect "p.get()" to be equal to "value"');strictEqual(c(),"value",'Expect "p()" to be equal to "value"');c("value");ok(!b,"Expect the custom setter not to be called");c("new value");ok(b,"Expect the custom setter to be called")});test("custom getter/setter with laziness construction test",function(){var a=!1,b=!1,c=d.makeProperty({lazy:!0,get:function(){a=!0;return"value"},set:function(){b=!0}});notStrictEqual(a,!0,
"Expect the custom getter to be called");strictEqual(c.toString(),"value",'Expect "p.toString()" to be equal to "value"');strictEqual(c.valueOf(),"value",'Expect "p.valueOf()" to be equal to "value"');strictEqual(c.get(),"value",'Expect "p.get()" to be equal to "value"');strictEqual(c(),"value",'Expect "p()" to be equal to "value"');c("value");ok(a,"Expect the custom getter to be called");ok(!b,"Expect the custom setter not to be called");c("new value");ok(b,"Expect the custom setter to be called")});
test("observable value property test",function(){var a=d.makeObservable(),b=d.makeProperty(a),c;strictEqual(b.toString(),"",'Expect "p.toString()" to be equal to the empty string');strictEqual(b.valueOf(),void 0,'Expect "p.valueOf()" to be equal to undefined');strictEqual(b.get(),void 0,'Expect "p.get()" to be equal to undefined');strictEqual(b(),void 0,'Expect "p()" to be equal to undefined');a.valueOf=function(){return"observable"};a.toString=a.valueOf;b=d.makeProperty({value:a});strictEqual(b.toString(),
a.toString(),'Expect "p.toString()" to be equal to "o.toString()"');strictEqual(b.valueOf(),a.valueOf(),'Expect "p.valueOf()" to be equal to "o.valueOf()"');strictEqual(b.get(),a,'Expect "p.get()" to be equal to o');strictEqual(b(),a,'Expect "p()" to be equal to o');c=!1;b.subscribe(function(){c=!0});a.notify();ok(c,'Expect the property to be notified when "o" has been notified');b.dispose()});test("operators test",function(){var a=!1,b=!1,c=d.makeProperty({value:{id:0,label:"apple"},equals:function(b){a=
!0;var c=this.get(),b=d.makeProperty.get(b);return c.id===b.id},changed:function(a){b=!0;var c=this.get(),a=d.makeProperty.get(a);return c.label!==a.label}});ok(c.equals({id:0}),"Expect property to be equal to {id: 0}");ok(a,"Expect custom equality operator to be called");ok(c.equals({id:0,label:"pear"})&&c.changed({id:0,label:"pear"}),'Expect property to be equal to {id: 0, label: "pear"} and will be changed if set');ok(b,"Expect custom equality operator to be called")});test("array property value test",
function(){var a=d.makeProperty([1,2,3]);n(a)});test("observable list property value test",function(){var a=d.makeObservableList([1,2,3]),a=d.makeProperty(a);n(a)});test("list operators test",function(){var a=d.makeProperty({value:d.makeList({id:0,label:"apple"},{id:1,label:"pear"},{id:2,label:"orange"}),equals:function(a,b){return a.id===b.id},changed:function(a,b){return a.label!==b.label}}),b=d.makeList({id:0,label:"apple"},{id:1,label:"pear"},{id:2,label:"orange"});ok(a.equals(b),"Expect the property to equal the list");
b.pop();notStrictEqual(a.equals(b),"Expect the property to equal the list");ok(a.changed(b),"Expect the property to change if set to the list")});module("Observable Tests");test("adherence test",function(){var a=d.makeObservable();ok("object"===typeof d.makeObservable.interfce&&d.makeObservable.interfce,'Expect binder.makeObservable to contain the property "interfce"');ok(k.adheresTo(a,d.makeObservable.interfce),'Expect "ob" to adhere to the "binder.makeObservable.interfce" interface')});test("subscription test",
function(){var a=d.makeObservable(),b=!1,c=function(){b=!0},i={onNotify:function(){this.notified=!0}},j,m;a.notify();notStrictEqual(b,!0,'Expect "fn" to be called');notStrictEqual(i.notified,!0,'Expect "observer.onNotify" to be called');j=a.subscribe(c);m=a.subscribe(i);b=!1;delete i.notified;a.notify();ok(b,'Expect "fn" to be called');ok(i.notified,'Expect "observer.onNotify" to be called');j.dispose();b=!1;delete i.notified;a.notify();notStrictEqual(b,!0,'Expect "fn" to be called');ok(i.notified,
'Expect "observer.onNotify" to be called');m.dispose();b=!1;delete i.notified;a.notify();notStrictEqual(b,!0,'Expect "fn" to be called');notStrictEqual(i.notified,!0,'Expect "observer.onNotify" to be called');j.dispose();m.dispose();b=!1;delete i.notified;a.notify();notStrictEqual(b,!0,'Expect "fn" to be called');notStrictEqual(i.notified,!0,'Expect "observer.onNotify" to be called');a.subscribe(c);a.subscribe(i);b=!1;delete i.notified;a.dispose();a.notify();notStrictEqual(b,!0,'Expect "fn" to be called');
notStrictEqual(i.notified,!0,'Expect "observer.onNotify" to be called')});test("blocking test",function(){var a=d.makeObservable(),b=!1;a.notify();notStrictEqual(b,!0,'Expect "fn" to be called');b=!1;a.subscribe(function(){b=!0});a.unblock();a.notify();ok(b,'Expect "fn" to be called');b=!1;a.block();a.notify();notStrictEqual(b,!0,'Expect "fn" to be called');a.unblock();notStrictEqual(b,!0,'Expect "fn" to be called');a.dispose()});asyncTest("throttling test",function(){expect(2);var a=d.makeObservable(),
b=!1;a.subscribe(function(){b=!0});a.throttle(500);a.notify();a.notify();notStrictEqual('Expect "fn" to be called',b,!0);setTimeout(function(){ok(b,'Expect "fn" to be called after 500 milliseconds');start()},505)});asyncTest("throttling and observable disposal test",function(){expect(2);var a=d.makeObservable(),b=!1;a.subscribe(function(){b=!0});a.throttle(500);a.notify();a.dispose();notStrictEqual(b,!0,'Expect "fn" not to be called');setTimeout(function(){notStrictEqual(b,!0,'Expect "fn" not to be called after 500 milliseconds');
start()},505)});module("List Tests");test("adherence test",function(){var a=f();ok(Object.prototype.toString.call(a),"[object Array]","Expect the list to be a native Array");e(a)});test("indexOf test",function(){var a=f();ok("function"===typeof a.indexOf,"Expect list to have an indexOf() method");strictEqual(a.indexOf(2),1,"Expect index of 2 to be 1");strictEqual(a.indexOf(1),0,"Expect index of 1 to be 0");strictEqual(a.indexOf(1,1),3,"Expect index of 1 from index 1 to be 3");ok(0>a.indexOf(10),"Expect index of 10 to be less than zero");
e(a)});test("lastIndexOf test",function(){var a=f();ok("function"===typeof a.lastIndexOf,"Expect list to have an lastIndexOf() method");strictEqual(a.lastIndexOf(2),1,"Expect last index of 2 to be 1");strictEqual(a.lastIndexOf(1),3,"Expect last index of 1 to be 3");strictEqual(a.lastIndexOf(1,1),0,"Expect last index of 1 from index 1 to be 0");ok(0>a.lastIndexOf(10),"Expect last index of 10 to be less than zero");e(a)});test("reverse test",function(){var a=f();ok("function"===typeof a.reverse,"Expect list to have a reverse() method");
var b=a.reverse();strictEqual(b,a,'Expect "list.reverse()" to return the same list');strictEqual(a.join(", "),"1, 3, 2, 1","Expect the list to be in reverse order");e(a)});test("map test",function(){var a=f();ok("function"===typeof a.map,"Expect list to have an map() method");var b={},c=a.map(function(b,c,d){this.pass=d===a;return c},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");
notStrictEqual(c,a,'Do not expect "list.map()" to return a new list');strictEqual(c.join(", "),"0, 1, 2, 3","Expect the new list to be [0, 1, 2, 3]");c=a.map(function(b,c){0===c&&a.push(4);return c});strictEqual(a.join(", "),"1, 2, 3, 1, 4","Expect the list to be unmodified");strictEqual(c.join(", "),"0, 1, 2, 3","Expect the new list to be [0, 1, 2, 3]");c=a.map(function(b,c){0===c&&a.splice(4,1);notStrictEqual(c,4,"Did not expect the callback to be called with index 4");return c});strictEqual(a.join(", "),
"1, 2, 3, 1","Expect the list to be unmodified");strictEqual(c.join(", "),"0, 1, 2, 3, ","Expect the new list to be [0, 1, 2, 3, ]");e(a)});test("filter test",function(){var a=f();strictEqual(typeof a.filter,"function","list to have an filter() method");var b={},c=a.filter(function(b,c,d){this.pass=d===a;return 1<b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");notStrictEqual(c,
a,'Do not expect "list.filter()" to return a new list');strictEqual(c.join(", "),"2, 3","Expect the new list to be [2, 3]");c=a.filter(function(b,c){0===c&&a.push(4);return 1<b});strictEqual(a.join(", "),"1, 2, 3, 1, 4","Expect the list to be unmodified");strictEqual(c.join(", "),"2, 3","Expect the new list to be [2, 3]");c=a.filter(function(b,c){0===c&&a.splice(4,1);return 1<b});strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");strictEqual(c.join(", "),"2, 3","Expect the new list to be [2, 3]");
e(a)});test("forEach test",function(){var a=f();strictEqual(typeof a.forEach,"function","Expect list to have an forEach() method");var b={},c=[];a.forEach(function(b,j,d){this.pass=d===a;c[j]=b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");strictEqual(c.join(", "),"1, 2, 3, 1","Expect the new array to be [1, 2, 3, 1]");e(a)});test("reduce test",function(){var a=f();
strictEqual(typeof a.reduce,"function","Expect list to have an reduce() method");var b=a.reduce(function(a,b){return a+b},0);strictEqual(b,7,"Expect total to be 7");a[0]=0;b=a.reduce(function(a,b){return a+b});strictEqual(b,6,"Expect total to be 6");delete a[0];b=a.reduce(function(b,i,j){2===j&&a.splice(3,1);return b+i});strictEqual(b,5,"Expect total to be 5");a[2]=void 0;b=a.reduce(function(a,b){return void 0===b?a:a+b});strictEqual(b,2,"Expect total to be 2");e(a)});test("reduceRight test",function(){var a=
f();strictEqual(typeof a.reduceRight,"function","Expect list to have an reduceRight() method");var b=a.reduceRight(function(a,b){return a+b},0);strictEqual(b,7,"Expect total to be 7");a[0]=0;b=a.reduceRight(function(a,b){return a+b});strictEqual(b,6,"Expect total to be 6");delete a[0];b=a.reduceRight(function(b,i,j){2===j&&a.splice(1,1);return b+i});strictEqual(b,7,"Expect total to be 7");a[1]=void 0;b=a.reduceRight(function(a,b){return void 0===b?a:a+b});strictEqual(b,1,"Expect total to be 1");e(a)});
test("some test",function(){var a=f();strictEqual(typeof a.some,"function","Expect list to have an some() method");var b={},c=a.some(function(b,c,d){this.pass=d===a;return 2===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");ok(c,'Expect "value" to be true');c=a.some(function(){return!1});ok(!c,'Expect "value" to be false');c=a.some(function(b,c){1===c&&a.splice(3,
1);3===c&&notStrictEqual(c,3,"Did not expect index 3 to be visited");return!1});ok(!c,'Expect "value" to be false');e(a)});test("every test",function(){var a=f();strictEqual(typeof a.every,"function","Expect list to have an every() method");var b={},c=a.every(function(b,c,d){this.pass=d===a;return 2===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");ok(!c,'Expect "value" to be false');
delete a[0];c=a.every(function(a,b){0===b&&notStrictEqual(b,0,"Did not expect index 0 to be visited");return!0});ok(c,'Expect "value" to be true');c=a.every(function(b,c){1===c&&a.splice(3,1);3===c&&notStrictEqual(c,3,"Did not expect index 3 to be visited");return!0});ok(c,'Expect "value" to be true');e(a)});test("contains test",function(){var a=f();strictEqual(typeof a.contains,"function","Expect list to have an contains() method");ok(a.contains(1),"Expect list to contain 1");ok(a.contains(3),"Expect list to contain 3");
ok(!a.contains(30),"Expect list not to contain 30");a.clear();ok(!a.contains(3),"Expect list not to contain 3");e(a)});test("occurances test",function(){var a=f();strictEqual(typeof a.occurances,"function","Expect list to have an occurances() method");strictEqual(a.occurances(1),2,"Expect list to contain 2 occurances of 1");strictEqual(a.occurances(2),1,"Expect list to contain 1 occurances of 2");strictEqual(a.occurances(3),1,"Expect list to contain 2 occurances of 3");strictEqual(a.occurances(14),
0,"Expect list to contain 0 occurances of 14");a.pop();strictEqual(a.occurances(1),1,"Expect list to contain 1 occurances of 1");e(a)});test("distinct test",function(){var a=f();strictEqual(typeof a.distinct,"function","Expect list to have an distinct() method");var b=a.distinct();strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");strictEqual(b.join(", "),"2, 3","Expect the returned array to be [2, 3]");e(a)});test("first test",function(){var a=f();strictEqual(typeof a.first,
"function","Expect list to have an first() method");var b={},c=a.first(function(b,c,d){this.pass=d===a;ok(0>=c,"Expect only the first index to be visited");return 1===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");strictEqual(c,1,'Expect "value" to be equal to 1');c=a.first(function(a){return 31===a},b);strictEqual(c,void 0,'Expect "value" to be equal to undefined');
e(a)});test("last test",function(){var a=f();strictEqual(typeof a.last,"function","Expect list to have an last() method");var b={},c=a.last(function(b,c,d){this.pass=d===a;ok(c===a.length-1,"Expect only the last index to be visited");return 1===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");strictEqual(c,1,'Expect "value" to be equal to 1');c=a.last(function(a){return 31===
a},b);strictEqual(c,void 0,'Expect "value" to be equal to undefined');e(a)});test("find tets",function(){var a=f();strictEqual(typeof a.find,"function","Expect list to have an find() method");var b={},c=a.find(function(b,c,d){this.pass=d===a;0<c&&notStrictEqual(c,0,"Did not expect indices above 0 to be visited");return 1===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");
strictEqual(c.index,0,'Expect "value" to have index 0');c=a.find(function(a){return 31===a},b);ok(0>c.index,'Expect "value" to have a negative index');delete a[0];c=a.find(function(a,b){0===b&&notStrictEqual(b,0,"Did not expect index 0 to be visited");return 1===a},b);strictEqual(c.index,3,'Expect "value" to have index 3');e(a)});test("equals test",function(){var a=f();strictEqual(typeof a.equals,"function","Expect list to have an equals() method");var b=[1,2,3,1];ok(a.equals(b),"Expect the list to be equal to second list");
b.pop();ok(!a.equals(b),"Expect the list to not equal the second list");b.push(1);ok(a.equals(b),"Expect the list to be equal to second list");a.getItemOperators=function(){return{equals:function(){return!1},changed:function(a,b){return a!==b}}};ok(!a.equals(b),"Expect the list to not equal the second list");e(a)});test("changed test",function(){var a=f();strictEqual(typeof a.changed,"function","Expect list to have an changed() method");var b=[1,2,3,1];ok(!a.changed(b),"Expect the list to be the same as the second list");
b.pop();ok(a.changed(b),"Expect the list to be different than the second list");b.push(1);ok(!a.changed(b),"Expect the list to be the same as the second list");a.getItemOperators=function(){return{equals:function(){return!1},changed:function(){return!0}}};ok(a.changed(b),"Expect the list to be different than the second list");e(a)});test("compare test",function(){var a=f();strictEqual(typeof a.compare,"function","Expect list to have an compare() method");var b=[1,2,3,1],b=a.compare(b);notStrictEqual(a,
b,"Expect this list to not be the same list as the comparison result");strictEqual(b.length,4,"Expect the comparison result to have a length of 4");b=d.makeList(b);ok(b.every(function(a){return"retained"===a.status}),'Expect all comparison objects to have a status of "retained"');b=[2,3,1];b=d.makeList(a.compare(b));strictEqual(b[0].status,"retained",'Expect comparison object at index 0 to have a status of "retained"');strictEqual(b[1].status,"retained",'Expect comparison object at index 1 to have a status of "retained"');
strictEqual(b[2].status,"retained",'Expect comparison object at index 2 to have a status of "retained"');strictEqual(b[3].status,"deleted",'Expect comparison object at index 3 to have a status of "deleted"');b=[2,4];b=d.makeList(a.compare(b));strictEqual(b[0].status,"deleted",'Expected comparison object at index 0 to have a status of "deleted"');strictEqual(b[1].status,"retained",'Expected comparison object at index 1 to have a status of "retained"');strictEqual(b[2].status,"deleted",'Expected comparison object at index 2 to have a status of "deleted"');
strictEqual(b[3].status,"deleted",'Expected comparison object at index 3 to have a status of "deleted"');strictEqual(b[4].status,"added",'Expected comparison object at index 3 to have a status of "added"');strictEqual(b[4].otherIndex,1,"Expected comparison object at index 3 to have an otherIndex equal to 1");a=d.makeList({id:0,type:"fruit"},{id:1,type:"vegetable"},{id:2,type:"grains"});a.getItemOperators=function(){return{equals:function(a,b){return a.id===b.id},changed:function(a,b){return a.type!==
b.type}}};b=[{id:0,type:"fruit"},{id:1,type:"Vegetable"},{id:3,type:"meat"}];b=a.compare(b);strictEqual(b[0].status,"retained",'Expect comparison object at index 0 to have a status of "retained"');strictEqual(b[1].status,"changed",'Expect comparison object at index 1 to have a status of "changed"');strictEqual(b[2].status,"deleted",'Expect comparison object at index 2 to have a status of "deleted"');strictEqual(b[3].status,"added",'Expect comparison object at index 3 to have a status of "added"');
e(a)});test("merge test",function(){var a=f();strictEqual(typeof a.merge,"function","Expect list to have an merge() method");var b=[1,2,3,1],b=a.merge(b);notStrictEqual(a,b,'Expect the merged list to not be the same list as the "list"');strictEqual(b.join(", "),"1, 2, 3, 1","Expect the merged list to contain [1, 2, 3, 1]");b=[2,3];b=a.merge(b);strictEqual(b.join(", "),"2, 3","Expect the merged list to contain [2, 3]");a=d.makeList({id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"vegetable",
toString:function(){return this.type}},{id:2,type:"grains",toString:function(){return this.type}});a.getItemOperators=function(){return{equals:function(a,b){return a.id===b.id},changed:function(a,b){return a.type!==b.type}}};b=[{id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"Vegetable",toString:function(){return this.type}},{id:3,type:"meat",toString:function(){return this.type}}];b=a.merge(b);strictEqual(b.join(", "),"fruit, Vegetable, meat","Expect the merged list to contains [friuit, Vegetable, meat]");
e(a)});test("mergeWith test",function(){var a=f();strictEqual(typeof a.mergeWith,"function","Expect list to have an merveWith() method");var b=[1,2,3,1],b=a.mergeWith(b);strictEqual(b,void 0,"Expect the result of merging to be undefined");strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");b=[2,3];a.mergeWith(b);strictEqual(a.join(", "),"2, 3","Expect the list to contain [2, 3]");a=d.makeList({id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"vegetable",toString:function(){return this.type}},
{id:2,type:"grains",toString:function(){return this.type}});a.getItemOperators=function(){return{equals:function(a,b){return a.id===b.id},changed:function(a,b){return a.type!==b.type}}};b=[{id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"Vegetable",toString:function(){return this.type}},{id:3,type:"meat",toString:function(){return this.type}}];a.mergeWith(b);strictEqual(a.join(", "),"fruit, Vegetable, meat","Expect the list to contains [friuit, Vegetable, meat]");e(a)});test("remove test",
function(){var a=f();strictEqual(typeof a.remove,"function","Expect list to have an remove() method");a.remove(1);strictEqual(a.join(", "),"2, 3","Expect the list to contain [2, 3]");a.remove(2,3);strictEqual(a.join(", "),"","Expect the list to be empty");e(a)});test("removeAt test",function(){var a=f();strictEqual(typeof a.removeAt,"function","Expect list to have an removeAt() method");strictEqual(a.removeAt(0),1,"Expect the item that was removed to be equal to 1");strictEqual(a.join(", "),"2, 3, 1",
"Expect the list to contain [2, 3, 1]");strictEqual(a.removeAt(1),3,"Expect the item that was removed to be equal to 3");strictEqual(a.join(", "),"2, 1","Expect the list to contain [2, 1]");strictEqual(a.removeAt(20),void 0,"Expect the item that was removed to be equal to undefined");strictEqual(a.join(", "),"2, 1","Expect the list to contain [2, 1]");e(a)});test("clear test",function(){var a=f();strictEqual(typeof a.clear,"function","Expect list to have an clear() method");a.clear();strictEqual(a.length,
0,"Expect list to have length 0");strictEqual(a.join(", "),"","Expect list to contain nothing");e(a)});test("collapse test",function(){var a=f();strictEqual(typeof a.collapse,"function","Expect list to have an collapse() method");a.collapse();strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");delete a[0];a[1]=void 0;a.collapse();strictEqual(a.join(", "),"3, 1","Expect the list to contain [3, 1]");e(a)});test("replaceAt test",function(){var a=f();strictEqual(typeof a.replaceAt,
"function","Expect list to have an replaceAt() method");a.replaceAt(0,10);strictEqual(a[0],10,"Expect index 0 to hold the value 10");strictEqual(a.join(", "),"10, 2, 3, 1","Expect the list to contain [10, 2, 3, 1]");delete a[3];a.replaceAt(3,20);strictEqual(a[3],20,"Expect index 3 to hold the value 20");strictEqual(a.join(", "),"10, 2, 3, 20","Expect the list to contain [10, 2, 3, 20]");e(a)});test("isEmpty test",function(){var a=f();strictEqual(typeof a.isEmpty,"function","Expect list to have an isEmpty() method");
ok(!a.isEmpty(),"Expect list to not be empty");a.clear();ok(a.isEmpty(),"Expect list to be empty");a.push(1);ok(!a.isEmpty(),"Expect list to not be empty");a.pop();a.pop();ok(a.isEmpty(),"Expect list to be empty");a.splice(0,0,1,2,3);ok(!a.isEmpty(),"Expect list to not be empty");e(a)});test("peek test",function(){var a=f();strictEqual(typeof a.peek,"function","Expect list to have an peek() method");strictEqual(a.peek(),1,"Expect the last item to be 1");ok(!a.isEmpty(),"Expect the list to not be empty");
a.pop();strictEqual(a.peek(),3,"Expect the last item to be 3");e(a)});test("insert test",function(){var a=f();strictEqual(typeof a.insert,"function","Expect list to have an insert() method");a.insert(0,10);strictEqual(a.join(", "),"10, 1, 2, 3, 1","Expect the list to contain [10, 1, 2, 3, 1]");a.insert(1,20);strictEqual(a.join(", "),"10, 20, 1, 2, 3, 1","Expect the list to contain [10, 20, 1, 2, 3, 1]");a.insert(a.length,30);strictEqual(a.join(", "),"10, 20, 1, 2, 3, 1, 30","Expect the list to contain [10, 20, 1, 2, 3, 1, 30]");
a.insert(40,0);strictEqual(a.join(", "),"10, 20, 1, 2, 3, 1, 30, 0","Expect the list to contain [10, 20, 1, 2, 3, 1, 30, 0]");delete a[0];a.insert(0,0);strictEqual(a.join(", "),"0, 20, 1, 2, 3, 1, 30, 0","Expect the list to contain [0, 20, 1, 2, 3, 1, 30, 0]");e(a)});module("ObservableList Test");test("adherence test",function(){var a=g().list;ok(Object.prototype.toString.call(a),"[object Array]","Expect the list to be a native Array");h(a)});test("indexOf test",function(){var a=g().list;ok("function"===
typeof a.indexOf,"Expect list to have an indexOf() method");strictEqual(a.indexOf(2),1,"Expect index of 2 to be 1");strictEqual(a.indexOf(1),0,"Expect index of 1 to be 0");strictEqual(a.indexOf(1,1),3,"Expect index of 1 from index 1 to be 3");ok(0>a.indexOf(10),"Expect index of 10 to be less than zero");h(a)});test("lastIndexOf test",function(){var a=g().list;ok("function"===typeof a.lastIndexOf,"Expect list to have an lastIndexOf() method");strictEqual(a.lastIndexOf(2),1,"Expect last index of 2 to be 1");
strictEqual(a.lastIndexOf(1),3,"Expect last index of 1 to be 3");strictEqual(a.lastIndexOf(1,1),0,"Expect last index of 1 from index 1 to be 0");ok(0>a.lastIndexOf(10),"Expect last index of 10 to be less than zero");h(a)});test("reverse test",function(){var a=g(),b=a.list,a=a.observer;ok("function"===typeof b.reverse,"Expect list to have a reverse() method");var c=b.reverse();strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(c,b,'Expect "list.reverse()" to return the same list');
strictEqual(b.join(", "),"1, 3, 2, 1","Expect the list to be in reverse order");h(b)});test("map test",function(){var a=g().list;ok("function"===typeof a.map,"Expect list to have an map() method");var b={},c=a.map(function(b,c,d){this.pass=d===a;return c},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");notStrictEqual(c,a,'Do not expect "list.map()" to return a new list');
strictEqual(c.join(", "),"0, 1, 2, 3","Expect the new list to be [0, 1, 2, 3]");c=a.map(function(b,c){0===c&&a.push(4);return c});strictEqual(a.join(", "),"1, 2, 3, 1, 4","Expect the list to be unmodified");strictEqual(c.join(", "),"0, 1, 2, 3","Expect the new list to be [0, 1, 2, 3]");c=a.map(function(b,c){0===c&&a.splice(4,1);notStrictEqual(c,4,"Did not expect the callback to be called with index 4");return c});strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");strictEqual(c.join(", "),
"0, 1, 2, 3, ","Expect the new list to be [0, 1, 2, 3, ]");h(a)});test("filter test",function(){var a=g().list;strictEqual(typeof a.filter,"function","list to have an filter() method");var b={},c=a.filter(function(b,c,d){this.pass=d===a;return 1<b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");notStrictEqual(c,a,'Do not expect "list.filter()" to return a new list');
strictEqual(c.join(", "),"2, 3","Expect the new list to be [2, 3]");c=a.filter(function(b,c){0===c&&a.push(4);return 1<b});strictEqual(a.join(", "),"1, 2, 3, 1, 4","Expect the list to be unmodified");strictEqual(c.join(", "),"2, 3","Expect the new list to be [2, 3]");c=a.filter(function(b,c){0===c&&a.splice(4,1);return 1<b});strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");strictEqual(c.join(", "),"2, 3","Expect the new list to be [2, 3]");h(a)});test("forEach test",function(){var a=
g().list;strictEqual(typeof a.forEach,"function","Expect list to have an forEach() method");var b={},c=[];a.forEach(function(b,d,e){this.pass=e===a;c[d]=b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");strictEqual(c.join(", "),"1, 2, 3, 1","Expect the new array to be [1, 2, 3, 1]");h(a)});test("reduce test",function(){var a=g().list;strictEqual(typeof a.reduce,"function",
"Expect list to have an reduce() method");var b=a.reduce(function(a,b){return a+b},0);strictEqual(b,7,"Expect total to be 7");a[0]=0;b=a.reduce(function(a,b){return a+b});strictEqual(b,6,"Expect total to be 6");delete a[0];b=a.reduce(function(b,d,j){2===j&&a.splice(3,1);return b+d});strictEqual(b,5,"Expect total to be 5");a[2]=void 0;b=a.reduce(function(a,b){return void 0===b?a:a+b});strictEqual(b,2,"Expect total to be 2");h(a)});test("reduceRight test",function(){var a=g().list;strictEqual(typeof a.reduceRight,
"function","Expect list to have an reduceRight() method");var b=a.reduceRight(function(a,b){return a+b},0);strictEqual(b,7,"Expect total to be 7");a[0]=0;b=a.reduceRight(function(a,b){return a+b});strictEqual(b,6,"Expect total to be 6");delete a[0];b=a.reduceRight(function(b,d,j){2===j&&a.splice(1,1);return b+d});strictEqual(b,7,"Expect total to be 7");a[1]=void 0;b=a.reduceRight(function(a,b){return void 0===b?a:a+b});strictEqual(b,1,"Expect total to be 1");h(a)});test("some test",function(){var a=
g().list;strictEqual(typeof a.some,"function","Expect list to have an some() method");var b={},c=a.some(function(b,c,d){this.pass=d===a;return 2===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");ok(c,'Expect "value" to be true');c=a.some(function(){return!1});ok(!c,'Expect "value" to be false');c=a.some(function(b,c){1===c&&a.splice(3,1);3===c&&notStrictEqual(c,3,
"Did not expect index 3 to be visited");return!1});ok(!c,'Expect "value" to be false');h(a)});test("every test",function(){var a=g().list;strictEqual(typeof a.every,"function","Expect list to have an every() method");var b={},c=a.every(function(b,c,d){this.pass=d===a;return 2===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");ok(!c,'Expect "value" to be false');delete a[0];
c=a.every(function(a,b){0===b&&notStrictEqual(b,0,"Did not expect index 0 to be visited");return!0});ok(c,'Expect "value" to be true');c=a.every(function(b,c){1===c&&a.splice(3,1);3===c&&notStrictEqual(c,3,"Did not expect index 3 to be visited");return!0});ok(c,'Expect "value" to be true');h(a)});test("contains test",function(){var a=g().list;strictEqual(typeof a.contains,"function","Expect list to have an contains() method");ok(a.contains(1),"Expect list to contain 1");ok(a.contains(3),"Expect list to contain 3");
ok(!a.contains(30),"Expect list not to contain 30");a.clear();ok(!a.contains(3),"Expect list not to contain 3");h(a)});test("occurances test",function(){var a=g().list;strictEqual(typeof a.occurances,"function","Expect list to have an occurances() method");strictEqual(a.occurances(1),2,"Expect list to contain 2 occurances of 1");strictEqual(a.occurances(2),1,"Expect list to contain 1 occurances of 2");strictEqual(a.occurances(3),1,"Expect list to contain 2 occurances of 3");strictEqual(a.occurances(14),
0,"Expect list to contain 0 occurances of 14");a.pop();strictEqual(a.occurances(1),1,"Expect list to contain 1 occurances of 1");h(a)});test("distinct test",function(){var a=g().list;strictEqual(typeof a.distinct,"function","Expect list to have an distinct() method");var b=a.distinct();strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");strictEqual(b.join(", "),"2, 3","Expect the returned array to be [2, 3]");h(a)});test("first test",function(){var a=g().list;strictEqual(typeof a.first,
"function","Expect list to have an first() method");var b={},c=a.first(function(b,c,d){this.pass=d===a;ok(0>=c,"Expect only the first index to be visited");return 1===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");strictEqual(c,1,'Expect "value" to be equal to 1');c=a.first(function(a){return 31===a},b);strictEqual(c,void 0,'Expect "value" to be equal to undefined');
h(a)});test("last test",function(){var a=g().list;strictEqual(typeof a.last,"function","Expect list to have an last() method");var b={},c=a.last(function(b,c,d){this.pass=d===a;ok(c===a.length-1,"Expect only the last index to be visited");return 1===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");strictEqual(c,1,'Expect "value" to be equal to 1');c=a.last(function(a){return 31===
a},b);strictEqual(c,void 0,'Expect "value" to be equal to undefined');h(a)});test("find tets",function(){var a=g().list;strictEqual(typeof a.find,"function","Expect list to have an find() method");var b={},c=a.find(function(b,c,d){this.pass=d===a;0<c&&notStrictEqual(c,0,"Did not expect indices above 0 to be visited");return 1===b},b);strictEqual(a.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");ok(b.pass,"Expect the callback to be called with the correct scope and passed a reference to the list");
strictEqual(c.index,0,'Expect "value" to have index 0');c=a.find(function(a){return 31===a},b);ok(0>c.index,'Expect "value" to have a negative index');delete a[0];c=a.find(function(a,b){0===b&&notStrictEqual(b,0,"Did not expect index 0 to be visited");return 1===a},b);strictEqual(c.index,3,'Expect "value" to have index 3');h(a)});test("equals test",function(){var a=g().list;strictEqual(typeof a.equals,"function","Expect list to have an equals() method");var b=[1,2,3,1];ok(a.equals(b),"Expect the list to be equal to second list");
b.pop();ok(!a.equals(b),"Expect the list to not equal the second list");b.push(1);ok(a.equals(b),"Expect the list to be equal to second list");a.getItemOperators=function(){return{equals:function(){return!1},changed:function(a,b){return a!==b}}};ok(!a.equals(b),"Expect the list to not equal the second list");h(a)});test("changed test",function(){var a=g().list;strictEqual(typeof a.changed,"function","Expect list to have an changed() method");var b=[1,2,3,1];ok(!a.changed(b),"Expect the list to be the same as the second list");
b.pop();ok(a.changed(b),"Expect the list to be different than the second list");b.push(1);ok(!a.changed(b),"Expect the list to be the same as the second list");a.getItemOperators=function(){return{equals:function(){return!1},changed:function(){return!0}}};ok(a.changed(b),"Expect the list to be different than the second list");h(a)});test("compare test",function(){var a=g().list;strictEqual(typeof a.compare,"function","Expect list to have an compare() method");var b=[1,2,3,1],b=a.compare(b);notStrictEqual(a,
b,"Expect this list to not be the same list as the comparison result");strictEqual(b.length,4,"Expect the comparison result to have a length of 4");b=d.makeList(b);ok(b.every(function(a){return"retained"===a.status}),'Expect all comparison objects to have a status of "retained"');b=[2,3,1];b=d.makeList(a.compare(b));strictEqual(b[0].status,"retained",'Expect comparison object at index 0 to have a status of "retained"');strictEqual(b[1].status,"retained",'Expect comparison object at index 1 to have a status of "retained"');
strictEqual(b[2].status,"retained",'Expect comparison object at index 2 to have a status of "retained"');strictEqual(b[3].status,"deleted",'Expect comparison object at index 3 to have a status of "deleted"');b=[2,4];b=d.makeList(a.compare(b));strictEqual(b[0].status,"deleted",'Expected comparison object at index 0 to have a status of "deleted"');strictEqual(b[1].status,"retained",'Expected comparison object at index 1 to have a status of "retained"');strictEqual(b[2].status,"deleted",'Expected comparison object at index 2 to have a status of "deleted"');
strictEqual(b[3].status,"deleted",'Expected comparison object at index 3 to have a status of "deleted"');strictEqual(b[4].status,"added",'Expected comparison object at index 3 to have a status of "added"');strictEqual(b[4].otherIndex,1,"Expected comparison object at index 3 to have an otherIndex equal to 1");a=d.makeObservableList({id:0,type:"fruit"},{id:1,type:"vegetable"},{id:2,type:"grains"});a.getItemOperators=function(){return{equals:function(a,b){return a.id===b.id},changed:function(a,b){return a.type!==
b.type}}};b=[{id:0,type:"fruit"},{id:1,type:"Vegetable"},{id:3,type:"meat"}];b=a.compare(b);strictEqual(b[0].status,"retained",'Expect comparison object at index 0 to have a status of "retained"');strictEqual(b[1].status,"changed",'Expect comparison object at index 1 to have a status of "changed"');strictEqual(b[2].status,"deleted",'Expect comparison object at index 2 to have a status of "deleted"');strictEqual(b[3].status,"added",'Expect comparison object at index 3 to have a status of "added"');
h(a)});test("merge test",function(){var a=g().list;strictEqual(typeof a.merge,"function","Expect list to have an merge() method");var b=[1,2,3,1],b=a.merge(b);notStrictEqual(a,b,'Expect the merged list to not be the same list as the "list"');strictEqual(b.join(", "),"1, 2, 3, 1","Expect the merged list to contain [1, 2, 3, 1]");b=[2,3];b=a.merge(b);strictEqual(b.join(", "),"2, 3","Expect the merged list to contain [2, 3]");a=d.makeObservableList({id:0,type:"fruit",toString:function(){return this.type}},
{id:1,type:"vegetable",toString:function(){return this.type}},{id:2,type:"grains",toString:function(){return this.type}});a.getItemOperators=function(){return{equals:function(a,b){return a.id===b.id},changed:function(a,b){return a.type!==b.type}}};b=[{id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"Vegetable",toString:function(){return this.type}},{id:3,type:"meat",toString:function(){return this.type}}];b=a.merge(b);strictEqual(b.join(", "),"fruit, Vegetable, meat","Expect the merged list to contains [friuit, Vegetable, meat]");
h(a)});test("mergeWith test",function(){var a=g(),b=a.list,a=a.observer;strictEqual(typeof b.mergeWith,"function","Expect list to have an merveWith() method");var c=[1,2,3,1],c=b.mergeWith(c);strictEqual(a.notifiedCount,0,"Expect observer not to be notified when merging with identical lists");strictEqual(c,void 0,"Expect the result of merging to be undefined");strictEqual(b.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");c=[2,3];a.reset();b.mergeWith(c);strictEqual(a.notifiedCount,4,"Expect observer to be notified four times");
strictEqual(b.join(", "),"2, 3","Expect the list to contain [2, 3]");b.dispose();b=d.makeObservableList({id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"vegetable",toString:function(){return this.type}},{id:2,type:"grains",toString:function(){return this.type}});b.getItemOperators=function(){return{equals:function(a,b){return a.id===b.id},changed:function(a,b){return a.type!==b.type}}};c=[{id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"Vegetable",toString:function(){return this.type}},
{id:3,type:"meat",toString:function(){return this.type}}];a.reset();b.subscribe(a);b.mergeWith(c);strictEqual(a.notifiedCount,3,"Expect observer to be notified three times");strictEqual(b.join(", "),"fruit, Vegetable, meat","Expect the list to contains [friuit, Vegetable, meat]");h(b)});test("remove test",function(){var a=g(),b=a.list,a=a.observer;strictEqual(typeof b.remove,"function","Expect list to have an remove() method");b.remove(1);strictEqual(a.notifiedCount,2,"Expect observer to be notified twice");
strictEqual(b.join(", "),"2, 3","Expect the list to contain [2, 3]");a.reset();b.remove(2,3);strictEqual(a.notifiedCount,2,"Expect observer to be notified twice");strictEqual(b.join(", "),"","Expect the list to be empty");h(b)});test("removeAt test",function(){var a=g(),b=a.list,a=a.observer;strictEqual(typeof b.removeAt,"function","Expect list to have an removeAt() method");strictEqual(b.removeAt(0),1,"Expect the item that was removed to be equal to 1");strictEqual(a.notifiedCount,1,"Expect observer to be notified once");
strictEqual(b.join(", "),"2, 3, 1","Expect the list to contain [2, 3, 1]");a.reset();strictEqual(b.removeAt(1),3,"Expect the item that was removed to be equal to 3");strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b.join(", "),"2, 1","Expect the list to contain [2, 1]");a.reset();strictEqual(b.removeAt(20),void 0,"Expect the item that was removed to be equal to undefined");strictEqual(a.notifiedCount,0,"Expect observer not to be notified");strictEqual(b.join(", "),
"2, 1","Expect the list to contain [2, 1]");h(b)});test("clear test",function(){var a=g(),b=a.list,a=a.observer;strictEqual(typeof b.clear,"function","Expect list to have an clear() method");b.clear();strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b.length,0,"Expect list to have length 0");strictEqual(b.join(", "),"","Expect list to contain nothing");h(b)});test("collapse test",function(){var a=g(),b=a.list,a=a.observer;strictEqual(typeof b.collapse,"function","Expect list to have an collapse() method");
b.collapse();strictEqual(b.join(", "),"1, 2, 3, 1","Expect the list to be unmodified");strictEqual(a.notifiedCount,0,"Expect observer to not be notified");a.reset();delete b[0];b[1]=void 0;b.collapse();strictEqual(b.join(", "),"3, 1","Expect the list to contain [3, 1]");strictEqual(a.notifiedCount,1,"Expect observer to be notified once");h(b)});test("replaceAt test",function(){var a=g(),b=a.list,a=a.observer;strictEqual(typeof b.replaceAt,"function","Expect list to have an replaceAt() method");b.replaceAt(0,
10);strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b[0],10,"Expect index 0 to hold the value 10");strictEqual(b.join(", "),"10, 2, 3, 1","Expect the list to contain [10, 2, 3, 1]");a.reset();delete b[3];b.replaceAt(3,20);strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b[3],20,"Expect index 3 to hold the value 20");strictEqual(b.join(", "),"10, 2, 3, 20","Expect the list to contain [10, 2, 3, 20]");h(b)});test("isEmpty test",function(){var a=
g(),b=a.list,a=a.observer;strictEqual(typeof b.isEmpty,"function","Expect list to have an isEmpty() method");ok(!b.isEmpty(),"Expect list to not be empty");b.clear();strictEqual(a.notifiedCount,1,"Expect observer to be notified once");ok(b.isEmpty(),"Expect list to be empty");a.reset();b.push(1);ok(!b.isEmpty(),"Expect list to not be empty");strictEqual(a.notifiedCount,1,"Expect observer to be notified once");a.reset();b.pop();b.pop();strictEqual(a.notifiedCount,1,"Expect observer to be notified once");
ok(b.isEmpty(),"Expect list to be empty");b.splice(0,0,1,2,3);ok(!b.isEmpty(),"Expect list to not be empty");h(b)});test("peek test",function(){var a=g(),b=a.list,a=a.observer;strictEqual(typeof b.peek,"function","Expect list to have an peek() method");strictEqual(b.peek(),1,"Expect the last item to be 1");strictEqual(a.notifiedCount,0,"Expect observer to not be notified");ok(!b.isEmpty(),"Expect the list to not be empty");b.pop();strictEqual(b.peek(),3,"Expect the last item to be 3");h(b)});test("insert test",
function(){var a=g(),b=a.list,a=a.observer;strictEqual(typeof b.insert,"function","Expect list to have an insert() method");b.insert(0,10);strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b.join(", "),"10, 1, 2, 3, 1","Expect the list to contain [10, 1, 2, 3, 1]");a.reset();b.insert(1,20);strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b.join(", "),"10, 20, 1, 2, 3, 1","Expect the list to contain [10, 20, 1, 2, 3, 1]");a.reset();b.insert(b.length,
30);strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b.join(", "),"10, 20, 1, 2, 3, 1, 30","Expect the list to contain [10, 20, 1, 2, 3, 1, 30]");a.reset();b.insert(40,0);strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b.join(", "),"10, 20, 1, 2, 3, 1, 30, 0","Expect the list to contain [10, 20, 1, 2, 3, 1, 30, 0]");a.reset();delete b[0];b.insert(0,0);strictEqual(a.notifiedCount,1,"Expect observer to be notified once");strictEqual(b.join(", "),
"0, 20, 1, 2, 3, 1, 30, 0","Expect the list to contain [0, 20, 1, 2, 3, 1, 30, 0]");a.reset();b.insert(NaN,0);strictEqual(a.notifiedCount,0,"Expect observer to not be notified");e(b)});module("ObservableList Notification Arguments Tests");test("remove test",function(){var a=BINDER.makeObservableList(1,2,3),b,c;a.subscribe(function(a,c){b.push(c)});b=[];a.remove(2);c=b[0];strictEqual(c.action,"remove","Expected the actionArgs type to be 'remove'.");strictEqual(c.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");
strictEqual(c.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(c.oldStartingIndex,1,"Expected the actionArgs oldStartingIndex to be 1.");strictEqual(c.oldItems.join(","),"2","Expected the actionArgs oldItems to be [2].");b=[];a.remove(1,3,4,5,6);strictEqual(b.length,2,"Expected the list to notify twice.");c=b[0];strictEqual(c.action,"remove","Expected the actionArgs type to be 'remove'.");strictEqual(c.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");
strictEqual(c.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(c.oldStartingIndex,0,"Expected the actionArgs oldStartingIndex to be 0.");strictEqual(c.oldItems.join(","),"1","Expected the actionArgs oldItems to be [1].");c=b[1];strictEqual(c.action,"remove","Expected the actionArgs type to be 'remove'.");strictEqual(c.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");strictEqual(c.newItems.join(","),"","Expected the actionArgs newItems to be [].");
strictEqual(c.oldStartingIndex,0,"Expected the actionArgs oldStartingIndex to be 0.");strictEqual(c.oldItems.join(","),"3","Expected the actionArgs oldItems to be [3].");ok(a.isEmpty(),"Expected the list to be empty.");b=[];a.remove(1,2,3);strictEqual(b.length,0,"Expected the list to not notify when attempting to remove items from an empty list.")});test("replaceAt test",function(){var a=BINDER.makeObservableList(1,2,3),b;a.subscribe(function(a,d){b.push(d)});b=[];a.replaceAt(-1,0);strictEqual(b.length,
0,"Expected the list to not notify when attempting to replace an item out of range.");a.replaceAt(2,4);a=b[0];strictEqual(a.action,"replace","Expected the actionArgs type to be 'replace'.");strictEqual(a.newStartingIndex,2,"Expected the actionArgs newStartingIndex to be 2.");strictEqual(a.newItems.join(","),"4","Expected the actionArgs newItems to be [4].");strictEqual(a.oldStartingIndex,2,"Expected the actionArgs oldStartingIndex to be 2.");strictEqual(a.oldItems.join(","),"3","Expected the actionArgs oldItems to be [3].")});
test("clear test",function(){var a=BINDER.makeObservableList(1,2,3),b,c;a.subscribe(function(a,c){b.push(c)});b=[];a.clear();strictEqual(b.length,1,"Expected the list to only notify once when cleared.");c=b[0];strictEqual(c.action,"reset","Expected the actionArgs type to be 'reset'.");strictEqual(c.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");strictEqual(c.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");
strictEqual(c.oldItems.join(","),"","Expected the actionArgs oldItems to be [].");b=[];a.clear();strictEqual(b.length,0,"Expected the list to not notify when attempting to clear an empty list.")});test("collapse test",function(){var a=BINDER.makeObservableList(1,void 0,3,void 0),b,c;a.subscribe(function(a,c){b.push(c)});b=[];a.collapse();strictEqual(a.join(","),"1,3","Expected the sparse items to be removed.");strictEqual(b.length,1,"Expected the list to only notify once when collapsing.");c=b[0];
strictEqual(c.action,"reset","Expected the actionArgs type to be 'reset'.");strictEqual(c.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");strictEqual(c.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");strictEqual(c.oldItems.join(","),"","Expected the actionArgs oldItems to be [].");b=[];a.collapse();strictEqual(b.length,0,"Expected the list to not notify when attempting to collapse a compact list.")});
test("insert test",function(){var a=BINDER.makeObservableList(1,3),b,c;a.subscribe(function(a,c){b.push(c)});b=[];a.insert(10,0);strictEqual(b.length,1,"Expected the list to only notify once when inserting.");c=b[0];strictEqual(c.action,"add","Expected the actionArgs type to be 'add'.");strictEqual(c.newStartingIndex,2,"Expected the actionArgs newStartingIndex to be 2.");strictEqual(c.newItems.join(","),"0","Expected the actionArgs newItems to be [0].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");
strictEqual(c.oldItems.join(","),"","Expected the actionArgs oldItems to be [].");b=[];a.insert(0,-10);strictEqual(b.length,1,"Expected the list to only notify once when inserting.");c=b[0];strictEqual(c.action,"add","Expected the actionArgs type to be 'add'.");strictEqual(c.newStartingIndex,0,"Expected the actionArgs newStartingIndex to be 0.");strictEqual(c.newItems.join(","),"-10","Expected the actionArgs newItems to be [-10].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");
strictEqual(c.oldItems.join(","),"","Expected the actionArgs oldItems to be [].");b=[];a.insert(NaN,100);strictEqual(b.length,0,"Expected the list to not notify when attempting to insert with an invalid index.")});test("mergeWith test",function(){var a=BINDER.makeObservableList(1,2,3),b;a.subscribe(function(a,d){b.push(d)});b=[];a.mergeWith([1,2,3]);strictEqual(b.length,0,"Expected the list to not notify when merging identical lists.");b=[];a.mergeWith([1,3,4]);strictEqual(b.length,3,"Expected the list to notify three times.");
a=b[0];strictEqual(a.action,"remove","Expected the actionArgs type to be 'remove'.");strictEqual(a.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");strictEqual(a.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(a.oldStartingIndex,1,"Expected the actionArgs oldStartingIndex to be 1.");strictEqual(a.oldItems.join(","),"2","Expected the actionArgs oldItems to be [2].");a=b[1];strictEqual(a.action,"move","Expected the actionArgs type to be 'move'.");
strictEqual(a.newStartingIndex,1,"Expected the actionArgs newStartingIndex to be 1.");strictEqual(a.newItems.join(","),"3","Expected the actionArgs newItems to be [3].");strictEqual(a.oldStartingIndex,2,"Expected the actionArgs oldStartingIndex to be 2.");strictEqual(a.oldItems.join(","),"3","Expected the actionArgs oldItems to be [3].");a=b[2];strictEqual(a.action,"add","Expected the actionArgs type to be 'add'.");strictEqual(a.newStartingIndex,2,"Expected the actionArgs newStartingIndex to be 2.");
strictEqual(a.newItems.join(","),"4","Expected the actionArgs newItems to be [4].");strictEqual(a.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");strictEqual(a.oldItems.join(","),"","Expected the actionArgs oldItems to be [].")});test("reverse test",function(){var a=BINDER.makeObservableList(1,2,3),b;a.subscribe(function(a,d){b.push(d)});b=[];a.reverse();strictEqual(a.join(","),"3,2,1","Expected the list to be reversed.");strictEqual(b.length,1,"Expected the list to only notify once when reversing.");
a=b[0];strictEqual(a.action,"reset","Expected the actionArgs type to be 'reset'.");strictEqual(a.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");strictEqual(a.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(a.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");strictEqual(a.oldItems.join(","),"","Expected the actionArgs oldItems to be [].")});test("pop test",function(){var a=BINDER.makeObservableList(1,2,3),b,c;a.subscribe(function(a,
c){b.push(c)});b=[];a.pop();strictEqual(b.length,1,"Expected the list to only notify once when popping.");c=b[0];strictEqual(c.action,"remove","Expected the actionArgs type to be 'remove'.");strictEqual(c.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");strictEqual(c.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(c.oldStartingIndex,2,"Expected the actionArgs oldStartingIndex to be 2.");strictEqual(c.oldItems.join(","),"3","Expected the actionArgs oldItems to be [3].");
a.clear();b=[];a.pop();strictEqual(b.length,0,"Expected the list to not notify when popping from an empty list.")});test("push test",function(){var a=BINDER.makeObservableList(1,2,3),b,c;a.subscribe(function(a,c){b.push(c)});b=[];a.push(4);strictEqual(b.length,1,"Expected the list to only notify once when pushing a single item.");c=b[0];strictEqual(c.action,"add","Expected the actionArgs type to be 'add'.");strictEqual(c.newStartingIndex,3,"Expected the actionArgs newStartingIndex to be 3.");strictEqual(c.newItems.join(","),
"4","Expected the actionArgs newItems to be [4].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");strictEqual(c.oldItems.join(","),"","Expected the actionArgs oldItems to be [].");b=[];a.push(5,6);strictEqual(b.length,1,"Expected the list to notify once when pushing more than one item.");c=b[0];strictEqual(c.action,"add","Expected the actionArgs type to be 'add'.");strictEqual(c.newStartingIndex,4,"Expected the actionArgs newStartingIndex to be 4.");strictEqual(c.newItems.join(","),
"5,6","Expected the actionArgs newItems to be [5,6].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");strictEqual(c.oldItems.join(","),"","Expected the actionArgs oldItems to be [].")});test("shift test",function(){var a=BINDER.makeObservableList(1,2,3),b,c;a.subscribe(function(a,c){b.push(c)});b=[];a.shift();strictEqual(b.length,1,"Expected the list to only notify once when shifting.");c=b[0];strictEqual(c.action,"remove","Expected the actionArgs type to be 'remove'.");
strictEqual(c.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");strictEqual(c.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(c.oldStartingIndex,0,"Expected the actionArgs oldStartingIndex to be 0.");strictEqual(c.oldItems.join(","),"1","Expected the actionArgs oldItems to be [1].");a.clear();b=[];a.shift();strictEqual(b.length,0,"Expected the list to not notify when shifting from an empty list.")});test("unshift test",function(){var a=BINDER.makeObservableList(1,
2,3),b,c;a.subscribe(function(a,c){b.push(c)});b=[];a.unshift(4);strictEqual(b.length,1,"Expected the list to only notify once when unshifting a single item.");c=b[0];strictEqual(c.action,"add","Expected the actionArgs type to be 'add'.");strictEqual(c.newStartingIndex,0,"Expected the actionArgs newStartingIndex to be 0.");strictEqual(c.newItems.join(","),"4","Expected the actionArgs newItems to be [4].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");strictEqual(c.oldItems.join(","),
"","Expected the actionArgs oldItems to be [].");b=[];a.unshift(5,6);strictEqual(b.length,1,"Expected the list to notify once when pushing more than one item.");c=b[0];strictEqual(c.action,"add","Expected the actionArgs type to be 'add'.");strictEqual(c.newStartingIndex,0,"Expected the actionArgs newStartingIndex to be 0.");strictEqual(c.newItems.join(","),"5,6","Expected the actionArgs newItems to be [5,6].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");
strictEqual(c.oldItems.join(","),"","Expected the actionArgs oldItems to be [].")});test("sort test",function(){var a=BINDER.makeObservableList(3,2,1),b;a.subscribe(function(a,d){b.push(d)});b=[];a.sort();strictEqual(a.join(","),"1,2,3","Expected the list to be sorted.");strictEqual(b.length,1,"Expected the list to only notify once when sorting.");a=b[0];strictEqual(a.action,"reset","Expected the actionArgs type to be 'reset'.");strictEqual(a.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");
strictEqual(a.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(a.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");strictEqual(a.oldItems.join(","),"","Expected the actionArgs oldItems to be [].")});test("splice test",function(){var a=BINDER.makeObservableList(1,2,3),b,c;a.subscribe(function(a,c){b.push(c)});b=[];a.splice();strictEqual(b.length,0,"Expected the list to not notify when not splicing any items.");b=[];a.splice(0,0);strictEqual(b.length,
0,"Expected the list to not notify when not splicing any items.");b=[];a.splice(0,0,-1,0);strictEqual(b.length,1,"Expected the list to notify once when splicing.");c=b[0];strictEqual(c.action,"add","Expected the actionArgs type to be 'add'.");strictEqual(c.newStartingIndex,0,"Expected the actionArgs newStartingIndex to be 0.");strictEqual(c.newItems.join(","),"-1,0","Expected the actionArgs newItems to be [-1,0].");strictEqual(c.oldStartingIndex,-1,"Expected the actionArgs oldStartingIndex to be -1.");
strictEqual(c.oldItems.join(","),"","Expected the actionArgs oldItems to be [].");b=[];a.splice(1,1);strictEqual(b.length,1,"Expected the list to notify once when splicing.");c=b[0];strictEqual(c.action,"remove","Expected the actionArgs type to be 'remove'.");strictEqual(c.newStartingIndex,-1,"Expected the actionArgs newStartingIndex to be -1.");strictEqual(c.newItems.join(","),"","Expected the actionArgs newItems to be [].");strictEqual(c.oldStartingIndex,1,"Expected the actionArgs oldStartingIndex to be 1.");
strictEqual(c.oldItems.join(","),"0","Expected the actionArgs oldItems to be [0].");b=[];a.splice(0,2,4,5,6);strictEqual(b.length,1,"Expected the list to notify once when splicing.");c=b[0];strictEqual(c.action,"replace","Expected the actionArgs type to be 'replace'.");strictEqual(c.newStartingIndex,0,"Expected the actionArgs newStartingIndex to be 0.");strictEqual(c.newItems.join(","),"4,5,6","Expected the actionArgs newItems to be [4,5,6].");strictEqual(c.oldStartingIndex,0,"Expected the actionArgs oldStartingIndex to be 0.");
strictEqual(c.oldItems.join(","),"-1,1","Expected the actionArgs oldItems to be [-1,1].")});test("observe items test",function(){var a=BINDER.makeObservableList(),b,c;a.push(BINDER.makeProperty(1),BINDER.makeProperty(2),BINDER.makeProperty(3));a.subscribe(function(a,c){b.push(c)});b=[];strictEqual(a.join(","),"1,2,3","Expected list to be equal to the array [1,2,3]");a.observeItems(!0);a[0].set(0);strictEqual(b.length,1,"Expected the list to notify when an item has changed.");c=b[0];strictEqual(c.action,
"change","Expected the actionArgs type to be 'change'.");strictEqual(c.newStartingIndex,0,"Expected the actionArgs newStartingIndex to be 0.");strictEqual(c.newItems.join(","),"0","Expected the actionArgs newItems to be [0].");strictEqual(c.oldStartingIndex,0,"Expected the actionArgs oldStartingIndex to be 0.");strictEqual(c.oldItems.join(","),"0","Expected the actionArgs oldItems to be [0].");a.observeItems(!1);b=[];a[0].set(10);a[1].set(100);strictEqual(b.length,0,"Expected the list to not notify when an item has changed and the list is not observing items for change.");
a.block();a.observeItems(!0);c=a.splice(2,1).pop();a.unblock();c.set(1E3);strictEqual(b.length,0,"Expected the list to not notify when an item has been removed from the list then changed.")})})(UTIL,BINDER);
