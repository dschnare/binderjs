/*
Author: Darren Schnare
Keywords: javascript,binding,bind,property,list,observer,observable
License: MIT ( http://www.opensource.org/licenses/mit-license.php )
Repo: https://github.com/dschnare/binderjs
*/
(function(n,t){"use strict";var f=function(n,t){return{adherenceTest:function(){var i=n.makeObservable();t.expect('binder.makeObservable to contain the property "interfce"',typeof n.makeObservable.interfce=="object"&&n.makeObservable.interfce),t.expect('"ob" to adhere to the "binder.makeObservable.interfce" interface',n.utiljs.adheresTo(i,n.makeObservable.interfce))},subscriptionTest:function(){var u=n.makeObservable(),r=!1,e=function(){r=!0},i={onNotify:function(){this.notified=!0}},f={};u.notify(),t.dontExpect('"fn" to be called',r),t.dontExpect('"observer.onNotify" to be called',i.notified),f.fn=u.subscribe(e),f.observer=u.subscribe(i),r=!1,delete i.notified,u.notify(),t.expect('"fn" to be called',r),t.expect('"observer.onNotify" to be called',i.notified),f.fn.dispose(),r=!1,delete i.notified,u.notify(),t.dontExpect('"fn" to be called',r),t.expect('"observer.onNotify" to be called',i.notified),f.observer.dispose(),r=!1,delete i.notified,u.notify(),t.dontExpect('"fn" to be called',r),t.dontExpect('"observer.onNotify" to be called',i.notified),t.dontExpectToThrow('"subscriptions.fn.dispose" to throw an error',function(){f.fn.dispose()}),t.dontExpectToThrow('"subscriptions.observer.dispose" to throw an error',function(){f.observer.dispose()}),r=!1,delete i.notified,u.notify(),t.dontExpect('"fn" to be called',r),t.dontExpect('"observer.onNotify" to be called',i.notified),u.subscribe(e),u.subscribe(i),r=!1,delete i.notified,u.dispose(),u.notify(),t.dontExpect('"fn" to be called',r),t.dontExpect('"observer.onNotify" to be called',i.notified)},blockingTest:function(){var i=n.makeObservable(),r=!1,u=function(){r=!0};i.notify(),t.dontExpect('"fn" to be called',r),r=!1,i.subscribe(u),i.unblock(),i.notify(),t.expect('"fn" to be called',r),r=!1,i.block(),i.notify(),t.dontExpect('"fn" to be called',r),i.unblock(),t.dontExpect('"fn" to be called',r),i.dispose()},throttlingTest:function(){var i=n.makeObservable(),u=!1,f=function(){u=!0},r=t.util.promise.create();return i.subscribe(f),i.throttle(500),i.notify(),i.notify(),t.dontExpect('"fn" to be called',u),setTimeout(function(){u?r.fulfill():r.smash('Expected "fn" to be called after 500 milliseconds')},500),r},throttlingAndObservableDisposalTest:function(){var i=n.makeObservable(),u=!1,f=function(){u=!0},r=t.util.promise.create();return i.subscribe(f),i.throttle(500),i.notify(),i.dispose(),t.dontExpect('"fn" to be called',u),setTimeout(function(){u?r.smash('Did not expect "fn" to be called after 500 milliseconds'):r.fulfill()},500),r},throttlingAndSubscriptionDisposalTest:function(){var u=n.makeObservable(),r=!1,e=function(){r=!0},i=t.util.promise.create(),f;return f=u.subscribe(e),u.throttle(500),u.notify(),f.dispose(),t.dontExpect('"fn" to be called',r),setTimeout(function(){r?i.smash('Did not expect "fn" to be called after 500 milliseconds'):i.fulfill()},500),i}}}(BINDER,UNIT),e=function(n,t){return{setupTest:function(){this.list=n.makeList(1,2,3,1)},destroyTest:function(){this.list.clear(),delete this.list},adherenceTest:function(){t.expect("the list to be a native Array",Object.prototype.toString.call(this.list)==="[object Array]")},indexOfTest:function(){t.expect("list to have an indexOf() method",typeof this.list.indexOf=="function"),t.expect("index of 2 to be 1",this.list.indexOf(2)===1),t.expect("index of 1 to be 0",this.list.indexOf(1)===0),t.expect("index of 1 from index 1 to be 3",this.list.indexOf(1,1)===3),t.expect("index of 10 to be less than zero",this.list.indexOf(10)<0)},lastIndexOfTest:function(){t.expect("list to have an lastIndexOf() method",typeof this.list.lastIndexOf=="function"),t.expect("last index of 2 to be 1",this.list.lastIndexOf(2)===1),t.expect("last index of 1 to be 3",this.list.lastIndexOf(1)===3),t.expect("last index of 1 from index 1 to be 0",this.list.lastIndexOf(1,1)===0),t.expect("last index of 10 to be less than zero",this.list.lastIndexOf(10)<0)},reverseTest:function(){t.expect("list to have an reverse() method",typeof this.list.reverse=="function");var n=this.list.reverse();t.expect('"list.reverse()" to return the same list',n===this.list),t.expect("the list to be in reverse order",this.list.join(",")==="1,3,2,1")},mapTest:function(){t.expect("list to have an map() method",typeof this.list.map=="function");var i=this,r={},n=this.list.map(function(n,t,r){return this.pass=r===i.list,t},r);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",r.pass),t.expect('"list.map()" to return a new list',n!==this.list),t.expect("the new list to be [0,1,2,3]",n.join(",")==="0,1,2,3"),n=this.list.map(function(n,t){return t===0&&i.list.push(4),t}),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1,4"),t.expect("the new list to be [0,1,2,3]",n.join(",")==="0,1,2,3"),n=this.list.map(function(n,r){return r===0&&i.list.splice(4,1),r===4&&t.fail("Did not expect the callback to be called with index 4"),r}),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the new list to be [0,1,2,3,]",n.join(",")==="0,1,2,3,")},filterTest:function(){t.expect("list to have an filter() method",typeof this.list.filter=="function");var i=this,r={},n=this.list.filter(function(n,t,r){return this.pass=r===i.list,n>1},r);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",r.pass),t.expect('"list.filter()" to return a new list',n!==this.list),t.expect("the new list to be [2,3]",n.join(",")==="2,3"),n=this.list.filter(function(n,t){return t===0&&i.list.push(4),n>1}),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1,4"),t.expect("the new list to be [2,3]",n.join(",")==="2,3"),n=this.list.filter(function(n,t){return t===0&&i.list.splice(4,1),n>1}),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the new list to be [2,3]",n.join(",")==="2,3")},forEachTest:function(){t.expect("list to have an forEach() method",typeof this.list.forEach=="function");var r=this,i={},n=[];this.list.forEach(function(t,i,u){this.pass=u===r.list,n[i]=t},i),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect("the new array to be [1,2,3,1]",n.join(",")==="1,2,3,1")},reduceTest:function(){t.expect("list to have an reduce() method",typeof this.list.reduce=="function");var i=this,n=this.list.reduce(function(n,t){return n+t},0);t.expect("total to be 7",n===7),this.list[0]=0,n=this.list.reduce(function(n,t){return n+t}),t.expect("total to be 6",n===6),delete this.list[0],n=this.list.reduce(function(n,t,r){return r===2&&i.list.splice(3,1),n+t}),t.expect("total to be 5",n===5),this.list[2]=undefined,n=this.list.reduce(function(n,t){return t===undefined?n:n+t}),t.expect("total to be 2",n===2)},reduceRightTest:function(){t.expect("list to have an reduceRight() method",typeof this.list.reduceRight=="function");var i=this,n=this.list.reduceRight(function(n,t){return n+t},0);t.expect("total to be 7",n===7),this.list[0]=0,n=this.list.reduceRight(function(n,t){return n+t}),t.expect("total to be 6",n===6),delete this.list[0],n=this.list.reduceRight(function(n,t,r){return r===2&&i.list.splice(1,1),n+t}),t.expect("total to be 7",n===7),this.list[1]=undefined,n=this.list.reduceRight(function(n,t){return t===undefined?n:n+t}),t.expect("total to be 1",n===1)},someTest:function(){t.expect("list to have an some() method",typeof this.list.some=="function");var i={},r=this,n=this.list.some(function(n,t,i){return this.pass=i===r.list,n===2},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to be true',n),n=this.list.some(function(){return!1}),t.expect('"value" to be false',!n),n=this.list.some(function(n,i){return i===1&&r.list.splice(3,1),i===3&&t.fail("Did not expect index 3 to be visited"),!1}),t.expect('"value" to be false',!n)},everyTest:function(){t.expect("list to have an every() method",typeof this.list.every=="function");var i={},r=this,n=this.list.every(function(n,t,i){return this.pass=i===r.list,n===2},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to be false',!n),delete this.list[0],n=this.list.every(function(n,i){return i===0&&t.fail("Did not expect index 0 to be visited"),!0}),t.expect('"value" to be true',n),n=this.list.every(function(n,i){return i===1&&r.list.splice(3,1),i===3&&t.fail("Did not expect index 3 to be visited"),!0}),t.expect('"value" to be true',n)},containsTest:function(){t.expect("list to have an contains() method",typeof this.list.contains=="function"),t.expect("list to contain 1",this.list.contains(1)),t.expect("list to contain 3",this.list.contains(3)),t.dontExpect("list to contain 30",this.list.contains(30)),this.list.clear(),t.dontExpect("list to contain 3",this.list.contains(3))},occurancesTest:function(){t.expect("list to have an occurances() method",typeof this.list.occurances=="function"),t.expect("list to contain 2 occurances of 1",this.list.occurances(1)===2),t.expect("list to contain 1 occurances of 2",this.list.occurances(2)===1),t.expect("list to contain 2 occurances of 3",this.list.occurances(3)===1),t.expect("list to contain 0 occurances of 14",this.list.occurances(14)===0),this.list.pop(),t.expect("list to contain 1 occurances of 1",this.list.occurances(1)===1)},distinctTest:function(){t.expect("list to have an distinct() method",typeof this.list.distinct=="function");var n=this.list.distinct();t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the returned array to be [2,3]",n.join(",")==="2,3")},firstTest:function(){t.expect("list to have an first() method",typeof this.list.first=="function");var i={},r=this,n=this.list.first(function(n,i,u){return this.pass=u===r.list,i>0&&t.fail("Did not expect indices above 0 to be visited"),n===1},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to be equal to 1',n===1),n=this.list.first(function(n){return n===31},i),t.expect('"value" to be equal to undefined',n===undefined)},lastTest:function(){t.expect("list to have an last() method",typeof this.list.last=="function");var i={},r=this,n=this.list.last(function(n,i,u){return this.pass=u===r.list,i<r.list.length-1&&t.fail("Did not expect indices below the last index to be visited"),n===1},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to be equal to 1',n===1),n=this.list.last(function(n){return n===31},i),t.expect('"value" to be equal to undefined',n===undefined)},findTest:function(){t.expect("list to have an find() method",typeof this.list.find=="function");var i={},r=this,n=this.list.find(function(n,i,u){return this.pass=u===r.list,i>0&&t.fail("Did not expect indices above 0 to be visited"),n===1},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to have index 0',n.index===0),n=this.list.find(function(n){return n===31},i),t.expect('"value" to have a negative index',n.index<0),delete this.list[0],n=this.list.find(function(n,i){return i===0&&t.fail("Did not expect index 0 to be visited"),n===1},i),t.expect('"value" to have index 3',n.index===3)},equalsTest:function(){t.expect("list to have an equals() method",typeof this.list.equals=="function");var n=[1,2,3,1];t.expect("the list to be equal to second list",this.list.equals(n)),n.pop(),t.dontExpect("the list to be equal to second list",this.list.equals(n)),n.push(1),t.expect("the list to be equal to second list",this.list.equals(n)),this.list.getItemOperators=function(){return{equals:function(){return!1},changed:function(n,t){return n!==t}}},t.dontExpect("the list to be equal to second list",this.list.equals(n))},changedTest:function(){t.expect("list to have an changed() method",typeof this.list.changed=="function");var n=[1,2,3,1];t.dontExpect("the list to be different than the second list",this.list.changed(n)),n.pop(),t.expect("the list to be different than the second list",this.list.changed(n)),n.push(1),t.dontExpect("the list to be different than the second list",this.list.changed(n)),this.list.getItemOperators=function(){return{equals:function(){return!1},changed:function(){return!0}}},t.expect("the list to be different than the second list",this.list.changed(n))},compareTest:function(){t.expect("list to have an compare() method",typeof this.list.compare=="function");var r=[1,2,3,1],i=this.list.compare(r);t.expect("this list to not be the same list as the comparison result",this.list!==i),t.expect("the comparison result to have a length of 4",i.length===4),i=n.makeList(i),t.expect('all comparison objects to have a status of "retained"',i.every(function(n){return n.status==="retained"})),r=[2,3,1],i=n.makeList(this.list.compare(r)),t.expect('comparison object at index 0 to have a status of "retained"',i[0].status==="retained"),t.expect('comparison object at index 1 to have a status of "retained"',i[1].status==="retained"),t.expect('comparison object at index 2 to have a status of "retained"',i[2].status==="retained"),t.expect('comparison object at index 3 to have a status of "deleted"',i[3].status==="deleted"),r=[2,4],i=n.makeList(this.list.compare(r)),t.expect('comparison object at index 0 to have a status of "deleted"',i[0].status==="deleted"),t.expect('comparison object at index 1 to have a status of "retained"',i[1].status==="retained"),t.expect('comparison object at index 2 to have a status of "deleted"',i[2].status==="deleted"),t.expect('comparison object at index 3 to have a status of "deleted"',i[3].status==="deleted"),t.expect('comparison object at index 3 to have a status of "added"',i[4].status==="added"),t.expect("comparison object at index 3 to have an otherIndex equal to 1",i[4].otherIndex===1),this.list=n.makeList({id:0,type:"fruit"},{id:1,type:"vegetable"},{id:2,type:"grains"}),this.list.getItemOperators=function(){return{equals:function(n,t){return n.id===t.id},changed:function(n,t){return n.type!==t.type}}},r=[{id:0,type:"fruit"},{id:1,type:"Vegetable"},{id:3,type:"meat"}],i=this.list.compare(r),t.expect('comparison object at index 0 to have a status of "retained"',i[0].status==="retained"),t.expect('comparison object at index 1 to have a status of "changed"',i[1].status==="changed"),t.expect('comparison object at index 2 to have a status of "deleted"',i[2].status==="deleted"),t.expect('comparison object at index 3 to have a status of "added"',i[3].status==="added")},mergeTest:function(){t.expect("list to have an merge() method",typeof this.list.merge=="function");var r=[1,2,3,1],i=this.list.merge(r);t.expect('the merged list to not be the same list as the "this.list"',this.list!==i),t.expect("the merged list to contain [1,2,3,1]",i.join(",")==="1,2,3,1"),r=[2,3],i=this.list.merge(r),t.expect("the merged list to contain [2, 3]",i.join(",")==="2,3"),this.list=n.makeList({id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"vegetable",toString:function(){return this.type}},{id:2,type:"grains",toString:function(){return this.type}}),this.list.getItemOperators=function(){return{equals:function(n,t){return n.id===t.id},changed:function(n,t){return n.type!==t.type}}},r=[{id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"Vegetable",toString:function(){return this.type}},{id:3,type:"meat",toString:function(){return this.type}}],i=this.list.merge(r),t.expect("the merged list to contains [friuit, Vegetable, meat]",i.join(",")==="fruit,Vegetable,meat")},mergeWithTest:function(){t.expect("list to have an merveWith() method",typeof this.list.mergeWith=="function");var i=[1,2,3,1],r=this.list.mergeWith(i);t.expect("the result of merging to be undefined",r===undefined),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),i=[2,3],this.list.mergeWith(i),t.expect("the list to contain [2, 3]",this.list.join(",")==="2,3"),this.list=n.makeList({id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"vegetable",toString:function(){return this.type}},{id:2,type:"grains",toString:function(){return this.type}}),this.list.getItemOperators=function(){return{equals:function(n,t){return n.id===t.id},changed:function(n,t){return n.type!==t.type}}},i=[{id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"Vegetable",toString:function(){return this.type}},{id:3,type:"meat",toString:function(){return this.type}}],this.list.mergeWith(i),t.expect("the list to contains [friuit, Vegetable, meat]",this.list.join(",")==="fruit,Vegetable,meat")},removeTest:function(){t.expect("list to have an remove() method",typeof this.list.remove=="function"),this.list.remove(1),t.expect("the list to contain [2,3]",this.list.join(",")==="2,3"),this.list.remove(2,3),t.expect("the list to be empty",this.list.join(",")==="")},removeAtTest:function(){t.expect("list to have an removeAt() method",typeof this.list.removeAt=="function"),t.expect("the item that was removed to be equal to 0",this.list.removeAt(0)===1),t.expect("the list to contain [2,3,1]",this.list.join(",")==="2,3,1"),t.expect("the item that was removed to be equal to 0",this.list.removeAt(1)===3),t.expect("the list to contain [2,1]",this.list.join(",")==="2,1"),t.expect("the item that was removed to be equal to undefined",this.list.removeAt(20)===undefined),t.expect("the list to contain [2,1]",this.list.join(",")==="2,1")},clearTest:function(){t.expect("list to have an clear() method",typeof this.list.clear=="function"),this.list.clear(),t.expect("list to have length 0",this.list.length===0),t.expect("list to contain nothing",this.list.join(",")==="")},collapseTest:function(){t.expect("list to have an collapse() method",typeof this.list.collapse=="function"),this.list.collapse(),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),delete this.list[0],this.list[1]=undefined,this.list.collapse(),t.expect("the list to contain [3,1]",this.list.join(",")==="3,1")},replaceAtTest:function(){t.expect("list to have an replaceAt() method",typeof this.list.replaceAt=="function"),this.list.replaceAt(0,10),t.expect("index 0 to hold the value 10",this.list[0]===10),t.expect("the list to contain [10,2,3,1]",this.list.join(",")==="10,2,3,1"),delete this.list[3],this.list.replaceAt(3,20),t.expect("index 3 to hold the value 20",this.list[3]===20),t.expect("the list to contain [10,2,3,20]",this.list.join(",")==="10,2,3,20")},isEmptyTest:function(){t.expect("list to have an isEmpty() method",typeof this.list.isEmpty=="function"),t.dontExpect("list to be empty",this.list.isEmpty()),this.list.clear(),t.expect("list to be empty",this.list.isEmpty()),this.list.push(1),t.dontExpect("list to be empty",this.list.isEmpty()),this.list.pop(),this.list.pop(),t.expect("list to be empty",this.list.isEmpty()),this.list.splice(0,0,1,2,3),t.dontExpect("list to be empty",this.list.isEmpty())},peekTest:function(){t.expect("list to have an peek() method",typeof this.list.peek=="function"),t.expect("the last item to be 1",this.list.peek()===1),t.dontExpect("the list to be empty",this.list.isEmpty()),this.list.pop(),t.expect("the last item to be 3",this.list.peek()===3)},insertTest:function(){t.expect("list to have an insert() method",typeof this.list.insert=="function"),this.list.insert(0,10),t.expect("the list to contain [10,1,2,3,1]",this.list.join(",")==="10,1,2,3,1"),this.list.insert(1,20),t.expect("the list to contain [10,20,1,2,3,1]",this.list.join(",")==="10,20,1,2,3,1"),this.list.insert(this.list.length,30),t.expect("the list to contain [10,20,1,2,3,1,30]",this.list.join(",")==="10,20,1,2,3,1,30"),this.list.insert(40,0),t.expect("the list to contain [10,20,1,2,3,1,30,0]",this.list.join(",")==="10,20,1,2,3,1,30,0"),delete this.list[0],this.list.insert(0,0),t.expect("the list to contain [0,20,1,2,3,1,30,0]",this.list.join(",")==="0,20,1,2,3,1,30,0")}}}(BINDER,UNIT),u=function(n,t){return{setupTest:function(){this.list=n.makeObservableList(1,2,3,1),this.observer={notifiedCount:0,onNotify:function(n){this.notifiedCount+=Boolean(n)?1:0},reset:function(){this.notifiedCount=0}},this.list.subscribe(this.observer)},destroyTest:function(){this.observer.reset(),this.list.dispose(),this.list.clear(),delete this.list,delete this.observer},adherenceTest:function(){t.expect("the list to be a native Array",Object.prototype.toString.call(this.list)==="[object Array]")},indexOfTest:function(){t.expect("list to have an indexOf() method",typeof this.list.indexOf=="function"),t.expect("index of 2 to be 1",this.list.indexOf(2)===1),t.expect("index of 1 to be 0",this.list.indexOf(1)===0),t.expect("index of 1 from index 1 to be 3",this.list.indexOf(1,1)===3),t.expect("index of 10 to be less than zero",this.list.indexOf(10)<0)},lastIndexOfTest:function(){t.expect("list to have an lastIndexOf() method",typeof this.list.lastIndexOf=="function"),t.expect("last index of 2 to be 1",this.list.lastIndexOf(2)===1),t.expect("last index of 1 to be 3",this.list.lastIndexOf(1)===3),t.expect("last index of 1 from index 1 to be 0",this.list.lastIndexOf(1,1)===0),t.expect("last index of 10 to be less than zero",this.list.lastIndexOf(10)<0)},reverseTest:function(){t.expect("list to have an reverse() method",typeof this.list.reverse=="function");var n=this.list.reverse();t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect('"list.reverse()" to return the same list',n===this.list),t.expect("the list to be in reverse order",this.list.join(",")==="1,3,2,1")},mapTest:function(){t.expect("list to have an map() method",typeof this.list.map=="function");var i=this,r={},n=this.list.map(function(n,t,r){return this.pass=r===i.list,t},r);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",r.pass),t.expect('"list.map()" to return a new list',n!==this.list),t.expect("the new list to be [0,1,2,3]",n.join(",")==="0,1,2,3"),n=this.list.map(function(n,t){return t===0&&i.list.push(4),t}),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1,4"),t.expect("the new list to be [0,1,2,3]",n.join(",")==="0,1,2,3"),n=this.list.map(function(n,r){return r===0&&i.list.splice(4,1),r===4&&t.fail("Did not expect the callback to be called with index 4"),r}),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the new list to be [0,1,2,3,]",n.join(",")==="0,1,2,3,")},filterTest:function(){t.expect("list to have an filter() method",typeof this.list.filter=="function");var i=this,r={},n=this.list.filter(function(n,t,r){return this.pass=r===i.list,n>1},r);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",r.pass),t.expect('"list.filter()" to return a new list',n!==this.list),t.expect("the new list to be [2,3]",n.join(",")==="2,3"),n=this.list.filter(function(n,t){return t===0&&i.list.push(4),n>1}),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1,4"),t.expect("the new list to be [2,3]",n.join(",")==="2,3"),n=this.list.filter(function(n,t){return t===0&&i.list.splice(4,1),n>1}),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the new list to be [2,3]",n.join(",")==="2,3")},forEachTest:function(){t.expect("list to have an forEach() method",typeof this.list.forEach=="function");var r=this,i={},n=[];this.list.forEach(function(t,i,u){this.pass=u===r.list,n[i]=t},i),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect("the new array to be [1,2,3,1]",n.join(",")==="1,2,3,1")},reduceTest:function(){t.expect("list to have an reduce() method",typeof this.list.reduce=="function");var i=this,n=this.list.reduce(function(n,t){return n+t},0);t.expect("total to be 7",n===7),this.list[0]=0,n=this.list.reduce(function(n,t){return n+t}),t.expect("total to be 6",n===6),delete this.list[0],n=this.list.reduce(function(n,t,r){return r===2&&i.list.splice(3,1),n+t}),t.expect("total to be 5",n===5),this.list[2]=undefined,n=this.list.reduce(function(n,t){return t===undefined?n:n+t}),t.expect("total to be 2",n===2)},reduceRightTest:function(){t.expect("list to have an reduceRight() method",typeof this.list.reduceRight=="function");var i=this,n=this.list.reduceRight(function(n,t){return n+t},0);t.expect("total to be 7",n===7),this.list[0]=0,n=this.list.reduceRight(function(n,t){return n+t}),t.expect("total to be 6",n===6),delete this.list[0],n=this.list.reduceRight(function(n,t,r){return r===2&&i.list.splice(1,1),n+t}),t.expect("total to be 7",n===7),this.list[1]=undefined,n=this.list.reduceRight(function(n,t){return t===undefined?n:n+t}),t.expect("total to be 1",n===1)},someTest:function(){t.expect("list to have an some() method",typeof this.list.some=="function");var i={},r=this,n=this.list.some(function(n,t,i){return this.pass=i===r.list,n===2},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to be true',n),n=this.list.some(function(){return!1}),t.expect('"value" to be false',!n),n=this.list.some(function(n,i){return i===1&&r.list.splice(3,1),i===3&&t.fail("Did not expect index 3 to be visited"),!1}),t.expect('"value" to be false',!n)},everyTest:function(){t.expect("list to have an every() method",typeof this.list.every=="function");var i={},r=this,n=this.list.every(function(n,t,i){return this.pass=i===r.list,n===2},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to be false',!n),delete this.list[0],n=this.list.every(function(n,i){return i===0&&t.fail("Did not expect index 0 to be visited"),!0}),t.expect('"value" to be true',n),n=this.list.every(function(n,i){return i===1&&r.list.splice(3,1),i===3&&t.fail("Did not expect index 3 to be visited"),!0}),t.expect('"value" to be true',n)},containsTest:function(){t.expect("list to have an contains() method",typeof this.list.contains=="function"),t.expect("list to contain 1",this.list.contains(1)),t.expect("list to contain 3",this.list.contains(3)),t.dontExpect("list to contain 30",this.list.contains(30)),this.list.clear(),t.dontExpect("list to contain 3",this.list.contains(3))},occurancesTest:function(){t.expect("list to have an occurances() method",typeof this.list.occurances=="function"),t.expect("list to contain 2 occurances of 1",this.list.occurances(1)===2),t.expect("list to contain 1 occurances of 2",this.list.occurances(2)===1),t.expect("list to contain 2 occurances of 3",this.list.occurances(3)===1),t.expect("list to contain 0 occurances of 14",this.list.occurances(14)===0),this.list.pop(),t.expect("list to contain 1 occurances of 1",this.list.occurances(1)===1)},distinctTest:function(){t.expect("list to have an distinct() method",typeof this.list.distinct=="function");var n=this.list.distinct();t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the returned array to be [2,3]",n.join(",")==="2,3")},firstTest:function(){t.expect("list to have an first() method",typeof this.list.first=="function");var i={},r=this,n=this.list.first(function(n,i,u){return this.pass=u===r.list,i>0&&t.fail("Did not expect indices above 0 to be visited"),n===1},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to be equal to 1',n===1),n=this.list.first(function(n){return n===31},i),t.expect('"value" to be equal to undefined',n===undefined)},lastTest:function(){t.expect("list to have an last() method",typeof this.list.last=="function");var i={},r=this,n=this.list.last(function(n,i,u){return this.pass=u===r.list,i<r.list.length-1&&t.fail("Did not expect indices below the last index to be visited"),n===1},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to be equal to 1',n===1),n=this.list.last(function(n){return n===31},i),t.expect('"value" to be equal to undefined',n===undefined)},findTest:function(){t.expect("list to have an find() method",typeof this.list.find=="function");var i={},r=this,n=this.list.find(function(n,i,u){return this.pass=u===r.list,i>0&&t.fail("Did not expect indices above 0 to be visited"),n===1},i);t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("the callback to be called with the correct scope and passed a reference to the list",i.pass),t.expect('"value" to have index 0',n.index===0),n=this.list.find(function(n){return n===31},i),t.expect('"value" to have a negative index',n.index<0),delete this.list[0],n=this.list.find(function(n,i){return i===0&&t.fail("Did not expect index 0 to be visited"),n===1},i),t.expect('"value" to have index 3',n.index===3)},equalsTest:function(){t.expect("list to have an equals() method",typeof this.list.equals=="function");var n=[1,2,3,1];t.expect("the list to be equal to second list",this.list.equals(n)),n.pop(),t.dontExpect("the list to be equal to second list",this.list.equals(n)),n.push(1),t.expect("the list to be equal to second list",this.list.equals(n)),this.list.getItemOperators=function(){return{equals:function(){return!1},changed:function(n,t){return n!==t}}},t.dontExpect("the list to be equal to second list",this.list.equals(n))},changedTest:function(){t.expect("list to have an changed() method",typeof this.list.changed=="function");var n=[1,2,3,1];t.dontExpect("the list to be different than the second list",this.list.changed(n)),n.pop(),t.expect("the list to be different than the second list",this.list.changed(n)),n.push(1),t.dontExpect("the list to be different than the second list",this.list.changed(n)),this.list.getItemOperators=function(){return{equals:function(){return!1},changed:function(){return!0}}},t.expect("the list to be different than the second list",this.list.changed(n))},compareTest:function(){t.expect("list to have an compare() method",typeof this.list.compare=="function");var r=[1,2,3,1],i=this.list.compare(r);t.expect("this list to not be the same list as the comparison result",this.list!==i),t.expect("the comparison result to have a length of 4",i.length===4),i=n.makeList(i),t.expect('all comparison objects to have a status of "retained"',i.every(function(n){return n.status==="retained"})),r=[2,3,1],i=n.makeList(this.list.compare(r)),t.expect('comparison object at index 0 to have a status of "retained"',i[0].status==="retained"),t.expect('comparison object at index 1 to have a status of "retained"',i[1].status==="retained"),t.expect('comparison object at index 2 to have a status of "retained"',i[2].status==="retained"),t.expect('comparison object at index 3 to have a status of "deleted"',i[3].status==="deleted"),r=[2,4],i=n.makeList(this.list.compare(r)),t.expect('comparison object at index 0 to have a status of "deleted"',i[0].status==="deleted"),t.expect('comparison object at index 1 to have a status of "retained"',i[1].status==="retained"),t.expect('comparison object at index 2 to have a status of "deleted"',i[2].status==="deleted"),t.expect('comparison object at index 3 to have a status of "deleted"',i[3].status==="deleted"),t.expect('comparison object at index 3 to have a status of "added"',i[4].status==="added"),t.expect("comparison object at index 3 to have an otherIndex equal to 1",i[4].otherIndex===1),this.list=n.makeObservableList({id:0,type:"fruit"},{id:1,type:"vegetable"},{id:2,type:"grains"}),this.list.getItemOperators=function(){return{equals:function(n,t){return n.id===t.id},changed:function(n,t){return n.type!==t.type}}},r=[{id:0,type:"fruit"},{id:1,type:"Vegetable"},{id:3,type:"meat"}],i=this.list.compare(r),t.expect('comparison object at index 0 to have a status of "retained"',i[0].status==="retained"),t.expect('comparison object at index 1 to have a status of "changed"',i[1].status==="changed"),t.expect('comparison object at index 2 to have a status of "deleted"',i[2].status==="deleted"),t.expect('comparison object at index 3 to have a status of "added"',i[3].status==="added")},mergeTest:function(){t.expect("list to have an merge() method",typeof this.list.merge=="function");var r=[1,2,3,1],i=this.list.merge(r);t.expect('the merged list to not be the same list as the "this.list"',this.list!==i),t.expect("the merged list to contain [1,2,3,1]",i.join(",")==="1,2,3,1"),r=[2,3],i=this.list.merge(r),t.expect("the merged list to contain [2, 3]",i.join(",")==="2,3"),this.list=n.makeObservableList({id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"vegetable",toString:function(){return this.type}},{id:2,type:"grains",toString:function(){return this.type}}),this.list.getItemOperators=function(){return{equals:function(n,t){return n.id===t.id},changed:function(n,t){return n.type!==t.type}}},r=[{id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"Vegetable",toString:function(){return this.type}},{id:3,type:"meat",toString:function(){return this.type}}],i=this.list.merge(r),t.expect("the merged list to contains [friuit, Vegetable, meat]",i.join(",")==="fruit,Vegetable,meat")},mergeWithTest:function(){t.expect("list to have an merveWith() method",typeof this.list.mergeWith=="function");var i=[1,2,3,1],r=this.list.mergeWith(i);t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the result of merging to be undefined",r===undefined),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),i=[2,3],this.observer.reset(),this.list.mergeWith(i),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [2, 3]",this.list.join(",")==="2,3"),this.list.dispose(),this.list=n.makeObservableList({id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"vegetable",toString:function(){return this.type}},{id:2,type:"grains",toString:function(){return this.type}}),this.list.getItemOperators=function(){return{equals:function(n,t){return n.id===t.id},changed:function(n,t){return n.type!==t.type}}},i=[{id:0,type:"fruit",toString:function(){return this.type}},{id:1,type:"Vegetable",toString:function(){return this.type}},{id:3,type:"meat",toString:function(){return this.type}}],this.observer.reset(),this.list.subscribe(this.observer),this.list.mergeWith(i),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contains [friuit, Vegetable, meat]",this.list.join(",")==="fruit,Vegetable,meat")},removeTest:function(){t.expect("list to have an remove() method",typeof this.list.remove=="function"),this.list.remove(1),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [2,3]",this.list.join(",")==="2,3"),this.observer.reset(),this.list.remove(2,3),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to be empty",this.list.join(",")==="")},removeAtTest:function(){t.expect("list to have an removeAt() method",typeof this.list.removeAt=="function"),t.expect("the item that was removed to be equal to 0",this.list.removeAt(0)===1),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [2,3,1]",this.list.join(",")==="2,3,1"),this.observer.reset(),t.expect("the item that was removed to be equal to 0",this.list.removeAt(1)===3),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [2,1]",this.list.join(",")==="2,1"),this.observer.reset(),t.expect("the item that was removed to be equal to undefined",this.list.removeAt(20)===undefined),t.expect("observer to be notified zero times",this.observer.notifiedCount===0),t.expect("the list to contain [2,1]",this.list.join(",")==="2,1")},clearTest:function(){t.expect("list to have an clear() method",typeof this.list.clear=="function"),this.list.clear(),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("list to have length 0",this.list.length===0),t.expect("list to contain nothing",this.list.join(",")==="")},collapseTest:function(){t.expect("list to have an collapse() method",typeof this.list.collapse=="function"),this.list.collapse(),t.expect("the list to be unmodified",this.list.join(",")==="1,2,3,1"),t.expect("observer to be notified zero times",this.observer.notifiedCount===0),this.observer.reset(),delete this.list[0],this.list[1]=undefined,this.list.collapse(),t.expect("the list to contain [3,1]",this.list.join(",")==="3,1"),t.expect("observer to be notified once",this.observer.notifiedCount===1)},replaceAtTest:function(){t.expect("list to have an replaceAt() method",typeof this.list.replaceAt=="function"),this.list.replaceAt(0,10),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("index 0 to hold the value 10",this.list[0]===10),t.expect("the list to contain [10,2,3,1]",this.list.join(",")==="10,2,3,1"),this.observer.reset(),delete this.list[3],this.list.replaceAt(3,20),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("index 3 to hold the value 20",this.list[3]===20),t.expect("the list to contain [10,2,3,20]",this.list.join(",")==="10,2,3,20")},isEmptyTest:function(){t.expect("list to have an isEmpty() method",typeof this.list.isEmpty=="function"),t.dontExpect("list to be empty",this.list.isEmpty()),this.list.clear(),t.expect("list to be empty",this.list.isEmpty()),this.list.push(1),t.dontExpect("list to be empty",this.list.isEmpty()),this.list.pop(),this.list.pop(),t.expect("list to be empty",this.list.isEmpty()),this.list.splice(0,0,1,2,3),t.dontExpect("list to be empty",this.list.isEmpty())},peekTest:function(){t.expect("list to have an peek() method",typeof this.list.peek=="function"),t.expect("the last item to be 1",this.list.peek()===1),t.dontExpect("the list to be empty",this.list.isEmpty()),this.list.pop(),t.expect("the last item to be 3",this.list.peek()===3)},insertTest:function(){t.expect("list to have an insert() method",typeof this.list.insert=="function"),this.list.insert(0,10),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [10,1,2,3,1]",this.list.join(",")==="10,1,2,3,1"),this.observer.reset(),this.list.insert(1,20),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [10,20,1,2,3,1]",this.list.join(",")==="10,20,1,2,3,1"),this.observer.reset(),this.list.insert(this.list.length,30),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [10,20,1,2,3,1,30]",this.list.join(",")==="10,20,1,2,3,1,30"),this.observer.reset(),this.list.insert(40,0),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [10,20,1,2,3,1,30,0]",this.list.join(",")==="10,20,1,2,3,1,30,0"),this.observer.reset(),delete this.list[0],this.list.insert(0,0),t.expect("observer to be notified once",this.observer.notifiedCount===1),t.expect("the list to contain [0,20,1,2,3,1,30,0]",this.list.join(",")==="0,20,1,2,3,1,30,0"),this.observer.reset(),this.list.insert(NaN,0),t.expect("observer to be notified zero times",this.observer.notifiedCount===0)}}}(BINDER,UNIT),i=function(n,t){var i=function(n){t.expect('"p.toString()" to be equal to "1,2,3"',n.toString()==="1,2,3"),t.expect('"p().join(",")" to be equal to "1,2,3"',n().join(",")==="1,2,3"),t.expect('"p.get().join(",")" to be equal to "1,2,3"',n.get().join(",")==="1,2,3"),t.expect('"p.valueOf().join(",")" to be equal to "1,2,3"',n.valueOf().join(",")==="1,2,3"),n().push(4),t.expect('"p.valueOf().join(",")" to be equal to "1,2,3,4"',n.valueOf().join(",")==="1,2,3,4");var i=!1;n.subscribe(function(){i=!0}),i=!1,n().remove(1),t.expect("the property to be notified when the first element is removed",i),i=!1,n().clear(),t.expect("the property to be notified when the list is cleared",i),i=!1,n().push(1,2,3),t.expect("the property to be notified when new items are pushed onto the list",i),i=!1,n().pop(),t.expect("the property to be notified when an item is popped off the list",i),i=!1,n().shift(),t.expect("the property to be notified when item is removed from front of list",i),i=!1,n().unshift(1),t.expect("the property to be notified when item is prepended to front of list",i),i=!1,n().splice(0,1),t.expect("the property to be notified when the list is spliced",i),i=!1,n().splice(0,0),t.dontExpect("the property to be notified when the list is spliced but zero elements are removed and added",i),n().push(10),i=!1,n().sort(),t.expect("the property to be notified when the list is sorted",i),i=!1,n().insert(0,11),t.expect("the property to be notified when an item is inserted",i),i=!1,n().reverse(),t.expect("the property to be notified when the list is reversed",i),i=!1,n().replaceAt(0,99),t.expect("the property to be notified when an item is replaced",i),i=!1,n()[0]=undefined,n().collapse(),t.expect("the property to be notified when a sparse list is collapsed",i)};return{adherenceTest:function(){var i=n.makeProperty("value");t.expect('"p" to adhere to the "binder.makeProperty.interfce" interface',n.utiljs.adheresTo(i,n.makeProperty.interfce)),t.dontExpect('"p" to not be dependent',i.isDependent()),t.expect('"p" to have no dependencies',i.dependencies().length===0),t.expect('"p.toString()" to be equal to "value"',i.toString()==="value"),t.expect('"p.valueOf()" to be equal to "value"',i.valueOf()==="value"),t.expect('"p.get()" to be equal to "value"',i.get()==="value"),t.expect('"p()" to be equal to "value"',i()==="value"),i("value2"),t.expect('"p.toString()" to be equal to "value2"',i.toString()==="value2"),t.expect('"p.valueOf()" to be equal to "value2"',i.valueOf()==="value2"),t.expect('"p.get()" to be equal to "value2"',i.get()==="value2"),t.expect('"p()" to be equal to "value2"',i()==="value2"),i.set("value3"),t.expect('"p.toString()" to be equal to "value3"',i.toString()==="value3"),t.expect('"p.valueOf()" to be equal to "value3"',i.valueOf()==="value3"),t.expect('"p.get()" to be equal to "value3"',i.get()==="value3"),t.expect('"p()" to be equal to "value3"',i()==="value3"),i.dispose()},dependenciesTest:function(){var r=n.makeProperty("Super"),e=n.makeProperty("Mario"),f=!1,i=n.makeProperty(function(){return r+" "+e}),u=i.dependencies();t.expect('"fullName" to be dependent',i.isDependent()),t.expect('"fullName" to be dependent on "fname" and "lname"',u.contains(r)&&u.contains(e)),t.expect('"fullName()" to be equal to "Super Mario"',i()==="Super Mario"),i.subscribe(function(){f=!0}),r.set("super"),t.expect('"fullName" to be notified that "fname" has been changed',f),t.expect('"fullName()" to be equal to "super Mario"',i()==="super Mario"),f=!1,i.dispose(),r.set("Super"),t.dontExpect('"fullName" to be notified that "fname" has been changed',f),t.dontExpect('"fullName" to be dependent',i.isDependent()),t.dontExpect('"fullName" to be dependent on "fname" and "lname"',u.contains(r)&&u.contains(e)),t.expect('"fullName()" to be equal to "super Mario"',i()==="super Mario")},memoizationTest:function(){var i=!1,r=n.makeProperty(function(){return i=!0,"value"});t.expect("property to have been called",i),i=!1,r(),t.dontExpect("property to have been called",i),r.clearMemo(),r(),t.expect("property to have been called",i)},lazyTest:function(){var i=!1,r=n.makeProperty({lazy:!0,get:function(){return i=!0,"value"}});t.dontExpect("property to have been called",i),r(),t.expect("property to have been called",i)},simpleConstructionTest:function(){var i=n.makeProperty("value");t.expect('"p.toString()" to be equal to "value"',i.toString()==="value"),t.expect('"p.valueOf()" to be equal to "value"',i.valueOf()==="value"),t.expect('"p.get()" to be equal to "value"',i.get()==="value"),t.expect('"p()" to be equal to "value"',i()==="value")},valueParameterizedConstructionTest:function(){var i=n.makeProperty({value:"value"});t.expect('"p.toString()" to be equal to "value"',i.toString()==="value"),t.expect('"p.valueOf()" to be equal to "value"',i.valueOf()==="value"),t.expect('"p.get()" to be equal to "value"',i.get()==="value"),t.expect('"p()" to be equal to "value"',i()==="value")},getConstructionTest:function(){var r=!1,i=n.makeProperty({get:function(){return r=!0,"value"}});t.expect("the custom getter to be called",r),t.expect('"p.toString()" to be equal to "value"',i.toString()==="value"),t.expect('"p.valueOf()" to be equal to "value"',i.valueOf()==="value"),t.expect('"p.get()" to be equal to "value"',i.get()==="value"),t.expect('"p()" to be equal to "value"',i()==="value")},getSetConstructionTest:function(){var u=!1,r=!1,i=n.makeProperty({get:function(){return u=!0,"value"},set:function(){r=!0}});t.expect("the custom getter to be called",u),t.expect('"p.toString()" to be equal to "value"',i.toString()==="value"),t.expect('"p.valueOf()" to be equal to "value"',i.valueOf()==="value"),t.expect('"p.get()" to be equal to "value"',i.get()==="value"),t.expect('"p()" to be equal to "value"',i()==="value"),i("value"),t.dontExpect("the custom setter to be called",r),i("new value"),t.expect("the custom setter to be called",r)},getSetLazyConstructionTest:function(){var r=!1,u=!1,i=n.makeProperty({lazy:!0,get:function(){return r=!0,"value"},set:function(){u=!0}});t.dontExpect("the custom getter to be called",r),t.expect('"p.toString()" to be equal to "value"',i.toString()==="value"),t.expect("the custom getter to be called",r),t.expect('"p.valueOf()" to be equal to "value"',i.valueOf()==="value"),t.expect('"p.get()" to be equal to "value"',i.get()==="value"),t.expect('"p()" to be equal to "value"',i()==="value"),i("value"),t.dontExpect("the custom setter to be called",u),i("new value"),t.expect("the custom setter to be called",u)},observableValuePropertyTest:function(){var r=n.makeObservable(),i=n.makeProperty(r),u;t.expect('"p.toString()" to be equal to the empty string',i.toString()===""),t.expect('"p.valueOf()" to be equal to undefined',i.valueOf()===undefined),t.expect('"p.get()" to be equal to undefined',i.get()===undefined),t.expect('"p()" to be equal to undefined',i()===undefined),r.valueOf=function(){return"observable"},r.toString=r.valueOf,i=n.makeProperty({value:r}),t.expect('"p.toString()" to be equal to "o.toString()"',i.toString()===r.toString()),t.expect('"p.valueOf()" to be equal to "o.valueOf()"',i.valueOf()===r.valueOf()),t.expect('"p.get()" to be equal to o',i.get()===r),t.expect('"p()" to be equal to o',i()===r),u=!1,i.subscribe(function(){u=!0}),r.notify(),t.expect('the property to be notified when "o" has been notified',u),i.dispose()},operatorsTest:function(){var r=!1,u=!1,i=n.makeProperty({value:{id:0,label:"apple"},equals:function(t){r=!0;var i=this.get();return t=n.makeProperty.get(t),i.id===t.id},changed:function(t){u=!0;var i=this.get();return t=n.makeProperty.get(t),i.label!==t.label}});t.expect("property to be equal to {id: 0}",i.equals({id:0})),t.expect("custom equality operator to be called",r),t.expect('property to be equal to {id: 0, label: "pear"} and will be changed if set',i.equals({id:0,label:"pear"})&&i.changed({id:0,label:"pear"})),t.expect("custom equality operator to be called",u)},arrayTest:function(){var t=n.makeProperty([1,2,3]);i(t)},observableListTest:function(){var r=n.makeObservableList([1,2,3]),t=n.makeProperty(r);i(t)},listOperatorsTest:function(){var r=n.makeProperty({value:n.makeList({id:0,label:"apple"},{id:1,label:"pear"},{id:2,label:"orange"}),equals:function(n,t){return n.id===t.id},changed:function(n,t){return n.label!==t.label}}),i=n.makeList({id:0,label:"apple"},{id:1,label:"pear"},{id:2,label:"orange"});t.expect("the property to equal the list",r.equals(i)),i.pop(),t.dontExpect("the property to equal the list",r.equals(i)),t.expect("the property to change if set to the list",r.changed(i))}}}(BINDER,UNIT),r=function(){return{}}(BINDER,UNIT);t.makeTestHarness("Binderjs Test Harness","Observable Test Suite",f,"List Test Suite",e,"ObservableList Test Suite",u,"Property Test Suite",i,"Binding Test Suite",r).run()})(BINDER,UNIT)